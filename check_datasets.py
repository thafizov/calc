#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ data
"""
import json
import os
from datetime import datetime

def check_dataset(filename, expected_structure=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    filepath = f"data/{filename}"
    
    if not os.path.exists(filepath):
        print(f"‚ùå {filename}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        dates = list(data.keys())
        dates.sort()
        
        print(f"‚úÖ {filename}:")
        print(f"   –ü–µ—Ä–∏–æ–¥: {dates[0]} - {dates[-1]}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(dates)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        first_entry = data[dates[0]]
        if expected_structure:
            if isinstance(first_entry, dict):
                keys = list(first_entry.keys())
                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {keys}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
                missing_keys = set(expected_structure) - set(keys)
                if missing_keys:
                    print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏: {missing_keys}")
                    
                extra_keys = set(keys) - set(expected_structure)
                if extra_keys:
                    print(f"   ‚ÑπÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {extra_keys}")
            else:
                print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(first_entry).__name__}")
        else:
            if isinstance(first_entry, dict):
                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(first_entry.keys())}")
            else:
                print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(first_entry).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å 2000-01 –ø–æ 2025-05)
        expected_start = "2000-01"
        expected_end = "2025-05"
        
        if dates[0] != expected_start:
            print(f"   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å {dates[0]}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_start}")
        if dates[-1] != expected_end:
            print(f"   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ {dates[-1]}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_end}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 305: 25 –ª–µ—Ç * 12 –º–µ—Å—è—Ü–µ–≤ + 5 –º–µ—Å—è—Ü–µ–≤ 2025)
        expected_count = 305
        if len(dates) != expected_count:
            print(f"   ‚ö†Ô∏è  –ó–∞–ø–∏—Å–µ–π {len(dates)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
        example_dates = ["2000-01", "2008-12", "2014-12", "2020-04", "2025-05"]
        print(f"   –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        for date in example_dates:
            if date in data:
                value = data[date]
                if isinstance(value, dict):
                    formatted_values = {}
                    for k, v in value.items():
                        if isinstance(v, (int, float)):
                            formatted_values[k] = f"{v:.2%}"
                        else:
                            formatted_values[k] = str(v)
                    print(f"     {date}: {formatted_values}")
                else:
                    if isinstance(value, (int, float)):
                        print(f"     {date}: {value:.2%}")
                    else:
                        print(f"     {date}: {value}")
        
    except Exception as e:
        print(f"‚ùå {filename}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
    
    print()

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ data\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    datasets = [
        ("inflation_data.json", None),
        ("deposits.json", ["<1", "1-3", ">3"]),
        ("stocks_moex.json", None),
        ("bonds_ofz.json", None),
        ("bonds_corp.json", None)
    ]
    
    for filename, expected_structure in datasets:
        check_dataset(filename, expected_structure)
    
    print("‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 