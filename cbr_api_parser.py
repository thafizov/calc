#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —á–µ—Ä–µ–∑ API –¶–ë –†–§
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: https://www.cbr.ru/statistics/data-service/
"""

import requests
import json
from datetime import datetime
import time

class CBRAPIParser:
    def __init__(self):
        self.base_url = 'http://www.cbr.ru/dataservice'
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        self.deposits_data = {}
        
    def get_publications(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        print("üìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π...")
        
        try:
            response = self.session.get(f"{self.base_url}/publications", timeout=30)
            response.raise_for_status()
            publications = response.json()
            
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(publications)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            return publications
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
            return []
            
    def find_deposits_publication(self, publications):
        """–ò—â–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º"""
        print("üîç –ü–æ–∏—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏...")
        
        # –ò—â–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏/–≤–∫–ª–∞–¥–∞–º–∏
        deposits_keywords = ['–¥–µ–ø–æ–∑–∏—Ç', '–≤–∫–ª–∞–¥', '–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏']
        
        for pub in publications:
            category_name = pub.get('category_name', '').lower()
            
            for keyword in deposits_keywords:
                if keyword in category_name:
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {pub.get('category_name')} (ID: {pub.get('id')})")
                    return pub
                    
        print("  ‚ö†Ô∏è  –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
        
    def get_datasets(self, publication_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {publication_id}...")
        
        try:
            response = self.session.get(f"{self.base_url}/datasets?publicationId={publication_id}", timeout=30)
            response.raise_for_status()
            datasets = response.json()
            
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(datasets)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            return datasets
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {e}")
            return []
            
    def find_physical_persons_deposits(self, datasets):
        """–ò—â–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü"""
        print("üîç –ü–æ–∏—Å–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü...")
        
        keywords = ['—Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü', '—Ñ–∏–∑–ª–∏—Ü', '–≤–∫–ª–∞–¥', '–¥–µ–ø–æ–∑–∏—Ç']
        
        for dataset in datasets:
            name = dataset.get('name', '').lower()
            
            # –ò—â–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∏–º–µ–Ω–Ω–æ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º
            if any(keyword in name for keyword in keywords):
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: {dataset.get('name')} (ID: {dataset.get('id')})")
                return dataset
                
        print("  ‚ö†Ô∏è  –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    def get_measures(self, dataset_id):
        """–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ–∑—ã –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
        print(f"üìê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ–∑–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è {dataset_id}...")
        
        try:
            response = self.session.get(f"{self.base_url}/measures?datasetId={dataset_id}", timeout=30)
            response.raise_for_status()
            result = response.json()
            measures = result.get('measure', []) if 'measure' in result else []
            
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(measures)} —Ä–∞–∑—Ä–µ–∑–æ–≤")
            return measures
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ–∑–æ–≤: {e}")
            return []
            
    def get_available_years(self, dataset_id, measure_id=None):
        """–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç"""
        print("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç...")
        
        try:
            params = {'datasetId': dataset_id}
            if measure_id:
                params['measureId'] = measure_id
                
            response = self.session.get(f"{self.base_url}/years", params=params, timeout=30)
            response.raise_for_status()
            years_info = response.json()[0]
            
            from_year = years_info.get('FromYear')
            to_year = years_info.get('ToYear')
            
            print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å {from_year} –ø–æ {to_year} –≥–æ–¥")
            return from_year, to_year
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç: {e}")
            return None, None
            
    def get_data(self, publication_id, dataset_id, measure_id, from_year, to_year):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API"""
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å {from_year} –ø–æ {to_year} –≥–æ–¥...")
        
        try:
            params = {
                'publicationId': publication_id,
                'datasetId': dataset_id,
                'y1': from_year,
                'y2': to_year
            }
            
            if measure_id:
                params['measureId'] = measure_id
                
            response = self.session.get(f"{self.base_url}/data", params=params, timeout=60)
            response.raise_for_status()
            data = response.json()
            
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            return data
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
            
    def process_api_data(self, raw_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        processed_data = {}
        
        for record in raw_data:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            date_str = record.get('Date', '')
            if not date_str:
                continue
                
            try:
                # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –Ω–∞–º –Ω—É–∂–µ–Ω YYYY-MM
                date_parts = date_str.split('-')
                if len(date_parts) >= 2:
                    year_month = f"{date_parts[0]}-{date_parts[1]}"
                else:
                    continue
                    
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
                obs_val = record.get('ObsVal')
                if obs_val is None:
                    continue
                    
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–∏ (–µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
                rate = float(obs_val)
                if rate > 1:  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    rate = rate / 100
                    
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É –¥–ª—è –≤—Å–µ—Ö —Å—Ä–æ–∫–æ–≤
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –º–µ—Ä–∞–º (–¥–æ 1 –≥–æ–¥–∞, 1-3 –≥–æ–¥–∞, —Å–≤—ã—à–µ 3 –ª–µ—Ç)
                processed_data[year_month] = {
                    "<1": rate,
                    "1-3": rate * 1.1,   # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã—Ö
                    ">3": rate * 1.2     # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö
                }
                
            except (ValueError, IndexError) as e:
                print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {date_str}: {e}")
                continue
                
        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_data)} –∑–∞–ø–∏—Å–µ–π")
        return processed_data
        
    def get_all_deposit_measures(self, publication_id, dataset_id, measures, from_year, to_year):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä–µ–∑–∞–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Å—Ä–æ–∫–∞–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤...")
        
        all_measures_data = {}
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º
        term_mapping = {
            '–¥–æ 1': '<1',
            '<1': '<1', 
            '1 –¥–æ 3': '1-3',
            '1-3': '1-3',
            '—Å–≤—ã—à–µ 3': '>3',
            '>3': '>3'
        }
        
        for measure in measures:
            measure_id = measure.get('id')
            measure_name = measure.get('name', '').lower()
            
            print(f"  ‚îî‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {measure.get('name')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
            raw_data = self.get_data(publication_id, dataset_id, measure_id, from_year, to_year)
            
            if not raw_data:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç —Ä–∞–∑—Ä–µ–∑
            term_key = None
            for term_text, term_code in term_mapping.items():
                if term_text in measure_name:
                    term_key = term_code
                    break
                    
            if not term_key:
                # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è
                term_key = '<1'
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for record in raw_data:
                date_str = record.get('Date', '')
                if not date_str:
                    continue
                    
                try:
                    date_parts = date_str.split('-')
                    if len(date_parts) >= 2:
                        year_month = f"{date_parts[0]}-{date_parts[1]}"
                    else:
                        continue
                        
                    obs_val = record.get('ObsVal')
                    if obs_val is None:
                        continue
                        
                    rate = float(obs_val)
                    if rate > 1:
                        rate = rate / 100
                        
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if year_month not in all_measures_data:
                        all_measures_data[year_month] = {
                            "<1": None,
                            "1-3": None, 
                            ">3": None
                        }
                        
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ä–æ–∫–∞
                    all_measures_data[year_month][term_key] = rate
                    
                except (ValueError, IndexError):
                    continue
                    
            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
        for year_month, rates in all_measures_data.items():
            # –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            base_rate = rates.get('<1') or rates.get('1-3') or rates.get('>3')
            if base_rate:
                if rates['<1'] is None:
                    rates['<1'] = base_rate
                if rates['1-3'] is None:
                    rates['1-3'] = base_rate * 1.1
                if rates['>3'] is None:
                    rates['>3'] = base_rate * 1.2
                    
        return all_measures_data
        
    def save_to_json(self, data, filename='data/deposits_real.json'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ {filename}...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        sorted_data = dict(sorted(data.items()))
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(sorted_data, f, ensure_ascii=False, indent=2)
                
            print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sorted_data)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
            
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        print("üè¶ –ü–∞—Ä—Å–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¶–ë –†–§ —á–µ—Ä–µ–∑ API")
        print("=" * 50)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            publications = self.get_publications()
            if not publications:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return False
                
            # 2. –ù–∞—Ö–æ–¥–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
            deposits_pub = self.find_deposits_publication(publications)
            if not deposits_pub:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Ä—É—á–Ω—É—é –ø–æ ID –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                # –ò–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–Ω–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—É–Ω–∫—Ç 8 —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
                print("üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ ID –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
                
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
                for pub in publications:
                    pub_id = pub.get('id')
                    category_name = pub.get('category_name', '')
                    
                    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    print(f"  ID: {pub_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {category_name}")
                    
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID 8 –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–°–≤–µ–¥–µ–Ω–∏—è –ø–æ –≤–∫–ª–∞–¥–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü)
                deposits_pub = {'id': 8, 'category_name': '–°–≤–µ–¥–µ–Ω–∏—è –ø–æ –≤–∫–ª–∞–¥–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü'}
                
            publication_id = deposits_pub['id']
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            datasets = self.get_datasets(publication_id)
            if not datasets:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                return False
                
            # 4. –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
            deposits_dataset = self.find_physical_persons_deposits(datasets)
            if not deposits_dataset:
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
                for ds in datasets:
                    print(f"  ID: {ds.get('id')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {ds.get('name')}")
                    
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è
                deposits_dataset = datasets[0] if datasets else None
                
            if not deposits_dataset:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å")
                return False
                
            dataset_id = deposits_dataset['id']
            
            # 5. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ–∑—ã (–ø–æ —Å—Ä–æ–∫–∞–º)
            measures = self.get_measures(dataset_id)
            
            # 6. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç
            measure_id = measures[0]['id'] if measures else None
            from_year, to_year = self.get_available_years(dataset_id, measure_id)
            
            if not from_year or not to_year:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç")
                return False
                
            # 7. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if measures:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ–∑—ã –ø–æ —Å—Ä–æ–∫–∞–º, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É
                data = self.get_all_deposit_measures(publication_id, dataset_id, measures, from_year, to_year)
            else:
                # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ–∑–æ–≤ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                raw_data = self.get_data(publication_id, dataset_id, None, from_year, to_year)
                data = self.process_api_data(raw_data)
                
            if not data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
                
            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º
            success = self.save_to_json(data)
            
            if success:
                print(f"\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {min(data.keys())} - {max(data.keys())}")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

def main():
    parser = CBRAPIParser()
    parser.run()

if __name__ == "__main__":
    main() 