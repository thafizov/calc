import requests
from bs4 import BeautifulSoup
import re
import json

print("üîç –ü–∞—Ä—Å–∏–º –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å —Å–∞–π—Ç–∞ –¶–ë –†–§ (—Å 2009 –≥–æ–¥–∞)...")

# –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å 2009 –≥–æ–¥–∞
base_url = "https://www.cbr.ru/statistics/avgprocstav/"
params = {
    'UniDbQuery.Posted': 'True',
    'UniDbQuery.From': '1.01.2009',  # –ù–∞—á–∞–ª–æ 2009 –≥–æ–¥–∞
    'UniDbQuery.To': '31.12.2025'    # –ö–æ–Ω–µ—Ü 2025 –≥–æ–¥–∞
}

print(f"üìÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {params['UniDbQuery.From']} –ø–æ {params['UniDbQuery.To']}")

response = requests.get(base_url, params=params)
response.encoding = 'utf-8'

print(f"üåê URL –∑–∞–ø—Ä–æ—Å–∞: {response.url}")
print(f"üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

soup = BeautifulSoup(response.text, 'html.parser')

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç
pattern = re.compile(r"(I|II|III)\.(\d{2})\.(\d{4})")
priority = {"I": 1, "II": 2, "III": 3}
monthly = {}

# –ù–∞–π–¥–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
tables = soup.find_all("table")
print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

processed_dates = set()
total_rows = 0

for i, table in enumerate(tables):
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É {i+1}")
    rows = table.find_all("tr")
    print(f"   –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
    
    for j, row in enumerate(rows[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        total_rows += 1
        cols = row.find_all(['td', 'th'])
        if len(cols) < 2:
            continue
            
        date_raw = cols[0].text.strip()
        rate_raw = cols[1].text.strip().replace(",", ".")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
        if j <= 5:
            print(f"   –°—Ç—Ä–æ–∫–∞ {j}: –¥–∞—Ç–∞='{date_raw}', —Å—Ç–∞–≤–∫–∞='{rate_raw}'")
        
        match = pattern.match(date_raw)
        if match:
            dec, month, year = match.groups()
            key = f"{year}-{month}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            processed_dates.add(f"{dec}.{month}.{year}")
            
            try:
                rate = float(rate_raw)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏ (–æ—Ç 0.1% –¥–æ 50%)
                if 0.1 <= rate <= 50:
                    if (key not in monthly) or (priority[dec] > monthly[key]['priority']):
                        monthly[key] = {
                            "rate": round(rate / 100, 6),
                            "priority": priority[dec]
                        }
                        # –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if int(year) <= 2012:
                            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {key} = {rate}%")
            except ValueError:
                continue

print(f"\nüìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows}")
print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {len(processed_dates)}")
print(f"üíæ –ó–∞–ø–∏—Å–µ–π –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {len(monthly)}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤
if monthly:
    years = sorted(set(key.split('-')[0] for key in monthly.keys()))
    print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {years[0]} - {years[-1]}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≥–æ–¥–∞–º
    year_counts = {}
    for key in monthly.keys():
        year = key.split('-')[0]
        year_counts[year] = year_counts.get(year, 0) + 1
    
    print(f"üìà –ó–∞–ø–∏—Å–µ–π –ø–æ –≥–æ–¥–∞–º:")
    for year in sorted(year_counts.keys()):
        print(f"   {year}: {year_counts[year]} –∑–∞–ø–∏—Å–µ–π")

# –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
result = {}
for ym, data in sorted(monthly.items()):
    result[ym] = {
        "<1": data["rate"],
        "1-3": data["rate"],
        ">3": data["rate"]
    }

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
with open("deposits.json", "w", encoding="utf-8") as f:
    json.dump(result, f, ensure_ascii=False, indent=2)

print(f"\n‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ deposits.json")
print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(result)}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
if result:
    sorted_keys = sorted(result.keys())
    print(f"\nüìÖ –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:")
    for key in sorted_keys[:5]:
        rate_percent = result[key]["<1"] * 100
        print(f"   {key}: {rate_percent:.3f}%")
    
    print(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
    for key in sorted_keys[-5:]:
        rate_percent = result[key]["<1"] * 100
        print(f"   {key}: {rate_percent:.3f}%") 