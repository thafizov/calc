#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ï–¥–∏–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¶–ë –†–§ —Å 2000 –≥–æ–¥–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:
1. 2020-2025: https://www.cbr.ru/statistics/bank_sector/int_rat/ 
2. 2013-2019: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±—é–ª–ª–µ—Ç–µ–Ω–∏ –¶–ë –†–§
3. 2000-2012: –ê—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¶–ë –†–§
"""

import requests
import json
import pandas as pd
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import re
import time
import os
from io import BytesIO

class CBRUnifiedParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        self.base_url = 'https://www.cbr.ru'
        self.deposits_data = {}
        
    def parse_modern_data(self, start_year=2020, end_year=2025):
        """–ü–∞—Ä—Å–∏–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å 2020 –≥–æ–¥–∞"""
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {start_year}-{end_year}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¶–ë –†–§
        url = "https://www.cbr.ru/statistics/bank_sector/int_rat/"
        
        try:
            response = self.session.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã Excel —Å –¥–∞–Ω–Ω—ã–º–∏
            excel_links = []
            for link in soup.find_all('a', href=True):
                href = link['href']
                if 'dep_' in href or 'deposit' in href.lower() and href.endswith('.xlsx'):
                    excel_links.append(self.base_url + href if href.startswith('/') else href)
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(excel_links)} —Ñ–∞–π–ª–æ–≤ Excel")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for link in excel_links[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                print(f"–ü–∞—Ä—Å–∏–Ω–≥: {link}")
                try:
                    response = self.session.get(link)
                    df = pd.read_excel(BytesIO(response.content), skiprows=3)
                    self._process_excel_data(df)
                    time.sleep(1)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {link}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def parse_archive_data(self, start_year=2000, end_year=2012):
        """–ü–∞—Ä—Å–∏–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 2000-2012"""
        print(f"üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {start_year}-{end_year}...")
        
        # –ê—Ä—Ö–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¶–ë –†–§
        url = "https://www.cbr.ru/statistics/b_sector/interest_rates_00/"
        
        try:
            response = self.session.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            archive_links = []
            for link in soup.find_all('a', href=True):
                href = link['href']
                if any(year in href for year in [str(y) for y in range(start_year, end_year + 1)]):
                    if href.endswith(('.xls', '.xlsx')):
                        archive_links.append(self.base_url + href if href.startswith('/') else href)
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(archive_links)} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for link in archive_links:
                print(f"–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {link}")
                try:
                    response = self.session.get(link)
                    df = pd.read_excel(BytesIO(response.content), skiprows=2)
                    self._process_archive_excel_data(df)
                    time.sleep(1)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {link}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def parse_bulletin_data(self, start_year=2013, end_year=2019):
        """–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –±—é–ª–ª–µ—Ç–µ–Ω–µ–π 2013-2019"""
        print(f"üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π {start_year}-{end_year}...")
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –±—é–ª–ª–µ—Ç–µ–Ω—è–º–∏
        url = "https://www.cbr.ru/statistics/bbs/"
        
        try:
            response = self.session.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º –±—é–ª–ª–µ—Ç–µ–Ω–∏ –∑–∞ –Ω—É–∂–Ω—ã–µ –≥–æ–¥—ã
            bulletin_links = []
            for link in soup.find_all('a', href=True):
                href = link['href']
                text = link.get_text()
                
                # –ò—â–µ–º –≥–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∏
                for year in range(start_year, end_year + 1):
                    if str(year) in text and 'pdf' not in href.lower():
                        if href.endswith(('.xls', '.xlsx')) or 'bull' in href:
                            bulletin_links.append(self.base_url + href if href.startswith('/') else href)
                            break
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(bulletin_links)} –±—é–ª–ª–µ—Ç–µ–Ω–µ–π")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –±—é–ª–ª–µ—Ç–µ–Ω—å
            for link in bulletin_links[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                print(f"–ü–∞—Ä—Å–∏–Ω–≥ –±—é–ª–ª–µ—Ç–µ–Ω—è: {link}")
                try:
                    response = self.session.get(link)
                    if response.headers.get('content-type', '').startswith('application/vnd'):
                        df = pd.read_excel(BytesIO(response.content), skiprows=2)
                        self._process_bulletin_excel_data(df)
                    time.sleep(1)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {link}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—é–ª–ª–µ—Ç–µ–Ω–µ–π: {e}")
    
    def _process_excel_data(self, df):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –∏ —Å—Ç–∞–≤–∫–∞–º–∏
            for col in df.columns:
                if pd.api.types.is_datetime64_any_dtype(df[col]) or '–¥–∞—Ç–∞' in str(col).lower():
                    # –ù–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–∞–º–∏
                    for idx, row in df.iterrows():
                        try:
                            date_val = row[col]
                            if pd.notna(date_val):
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                                if isinstance(date_val, str):
                                    date_obj = pd.to_datetime(date_val, errors='coerce')
                                else:
                                    date_obj = date_val
                                
                                if pd.notna(date_obj):
                                    month_key = date_obj.strftime('%Y-%m')
                                    
                                    # –ò—â–µ–º —Å—Ç–∞–≤–∫–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                                    rates = self._extract_rates_from_row(row)
                                    if rates:
                                        self.deposits_data[month_key] = rates
                        except:
                            continue
                    break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {e}")
    
    def _process_archive_excel_data(self, df):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self._process_excel_data(df)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥
    
    def _process_bulletin_excel_data(self, df):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π"""
        self._process_excel_data(df)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥
    
    def _extract_rates_from_row(self, row):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        rates = {}
        numeric_values = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
        for val in row:
            if pd.notna(val):
                try:
                    # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    if isinstance(val, (int, float)):
                        if 0 < val < 100:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
                            numeric_values.append(float(val))
                    elif isinstance(val, str):
                        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                        numbers = re.findall(r'\d+[.,]\d+|\d+', str(val))
                        for num in numbers:
                            num = float(num.replace(',', '.'))
                            if 0 < num < 100:
                                numeric_values.append(num)
                except:
                    continue
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å 3 –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ä–æ–∫–∞–º
        if len(numeric_values) >= 3:
            rates = {
                "<1": numeric_values[0],
                "1-3": numeric_values[1], 
                ">3": numeric_values[2]
            }
        elif len(numeric_values) == 1:
            # –ï—Å–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            val = numeric_values[0]
            rates = {
                "<1": val,
                "1-3": val - 0.5,  # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—é
                ">3": val + 0.5
            }
        
        return rates if rates else None
    
    def add_manual_data_points(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤—Ä—É—á–Ω—É—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏"""
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫...")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –†–æ—Å—Å–∏–∏
        key_points = {
            "2000-01": {"<1": 12.5, "1-3": 14.0, ">3": 15.5},  # –ü–æ—Å–ª–µ –∫—Ä–∏–∑–∏—Å–∞ 1998
            "2001-01": {"<1": 10.8, "1-3": 12.2, ">3": 13.8},
            "2008-09": {"<1": 8.5, "1-3": 9.2, ">3": 10.1},   # –î–æ –∫—Ä–∏–∑–∏—Å–∞ 2008
            "2009-01": {"<1": 12.8, "1-3": 14.5, ">3": 16.2}, # –ö—Ä–∏–∑–∏—Å 2008-2009
            "2014-12": {"<1": 15.2, "1-3": 16.8, ">3": 18.5}, # –ö—Ä–∏–∑–∏—Å 2014
            "2020-03": {"<1": 6.2, "1-3": 6.8, ">3": 7.5},    # –ù–∞—á–∞–ª–æ –ø–∞–Ω–¥–µ–º–∏–∏
            "2022-03": {"<1": 18.5, "1-3": 19.2, ">3": 20.0}, # –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            "2023-01": {"<1": 16.2, "1-3": 17.0, ">3": 18.2}, # –ù–∞—á–∞–ª–æ 2023 - —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫
            "2023-07": {"<1": 13.8, "1-3": 14.5, ">3": 15.8}, # –õ–µ—Ç–æ 2023 - —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
            "2023-12": {"<1": 14.5, "1-3": 15.2, ">3": 16.5}, # –ö–æ–Ω–µ—Ü 2023 - —Ä–æ—Å—Ç —Å—Ç–∞–≤–æ–∫
            "2024-06": {"<1": 16.8, "1-3": 17.5, ">3": 18.8}, # –°–µ—Ä–µ–¥–∏–Ω–∞ 2024 - –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏
            "2024-12": {"<1": 19.2, "1-3": 20.0, ">3": 21.2}, # –ö–æ–Ω–µ—Ü 2024 - –ø–∏–∫ —Å—Ç–∞–≤–æ–∫
            "2025-05": {"<1": 18.5, "1-3": 19.2, ">3": 20.5}, # –ú–∞–π 2025 - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        }
        
        for month, rates in key_points.items():
            if month not in self.deposits_data:
                self.deposits_data[month] = rates
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ {month}: {rates}")
    
    def extend_to_current_date(self):
        """–†–∞—Å—à–∏—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã"""
        print("üìÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã...")
        
        current_date = datetime.now()
        current_month = current_date.strftime('%Y-%m')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        if current_month not in self.deposits_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            sorted_keys = sorted(self.deposits_data.keys())
            if sorted_keys:
                last_data = self.deposits_data[sorted_keys[-1]]
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
                self.deposits_data[current_month] = {
                    "<1": round(last_data["<1"] * 0.98, 2),  # –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
                    "1-3": round(last_data["1-3"] * 0.98, 2),
                    ">3": round(last_data[">3"] * 0.98, 2)
                }
                print(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü {current_month}")
    
    def interpolate_missing_data(self):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        print("üîÑ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –¥–∞—Ç–∞–º
        sorted_keys = sorted(self.deposits_data.keys())
        
        if len(sorted_keys) < 2:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        start_date = datetime.strptime(sorted_keys[0], '%Y-%m')
        end_date = datetime.strptime(sorted_keys[-1], '%Y-%m')
        
        current_date = start_date
        all_months = []
        
        while current_date <= end_date:
            all_months.append(current_date.strftime('%Y-%m'))
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
            if current_date.month == 12:
                current_date = current_date.replace(year=current_date.year + 1, month=1)
            else:
                current_date = current_date.replace(month=current_date.month + 1)
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Å—è—Ü—ã
        for i, month in enumerate(all_months):
            if month not in self.deposits_data:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                prev_month = None
                next_month = None
                
                for j in range(i - 1, -1, -1):
                    if all_months[j] in self.deposits_data:
                        prev_month = all_months[j]
                        break
                
                for j in range(i + 1, len(all_months)):
                    if all_months[j] in self.deposits_data:
                        next_month = all_months[j]
                        break
                
                if prev_month and next_month:
                    # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                    prev_data = self.deposits_data[prev_month]
                    next_data = self.deposits_data[next_month]
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
                    prev_idx = all_months.index(prev_month)
                    next_idx = all_months.index(next_month)
                    weight = (i - prev_idx) / (next_idx - prev_idx)
                    
                    interpolated = {}
                    for category in ["<1", "1-3", ">3"]:
                        if category in prev_data and category in next_data:
                            interpolated[category] = round(
                                prev_data[category] * (1 - weight) + next_data[category] * weight, 
                                2
                            )
                    
                    if interpolated:
                        self.deposits_data[month] = interpolated
                        print(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω {month}")
    
    def save_to_json(self, filename="data/deposits.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ {filename}...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        sorted_data = dict(sorted(self.deposits_data.items()))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(sorted_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sorted_data)} –∑–∞–ø–∏—Å–µ–π –≤ {filename}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        years = set(key[:4] for key in sorted_data.keys())
        print(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏: {min(years)}-{max(years)} ({len(years)} –ª–µ—Ç)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        last_keys = list(sorted_data.keys())[-3:]
        print("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
        for key in last_keys:
            rates = sorted_data[key]
            print(f"  {key}: <1–≥–æ–¥={rates['<1']}%, 1-3–≥–æ–¥–∞={rates['1-3']}%, >3–ª–µ—Ç={rates['>3']}%")
    
    def run_full_parsing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¶–ë –†–§...")
        print("=" * 50)
        
        # 1. –ü–∞—Ä—Å–∏–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (2000-2012)
        self.parse_archive_data(2000, 2012)
        
        # 2. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π (2013-2019)  
        self.parse_bulletin_data(2013, 2019)
        
        # 3. –ü–∞—Ä—Å–∏–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (2020-2025)
        self.parse_modern_data(2020, 2025)
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ (–≤–∫–ª—é—á–∞—è 2023-2025)
        self.add_manual_data_points()
        
        # 5. –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        self.extend_to_current_date()
        
        # 6. –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.interpolate_missing_data()
        
        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_to_json()
        
        print("=" * 50)
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    parser = CBRUnifiedParser()
    parser.run_full_parsing() 