import json
import calendar
from datetime import datetime

def load_moex_stocks():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ stocks_moex.json"""
    with open('data/stocks_moex.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_main_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö"""
    with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def convert_moex_to_accumulated_format(moex_data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞"""
    print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ stocks_moex.json...")
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ 100 (–±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ 31.12.1999)
    base_value = 100
    current_value = base_value
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
    result = [{
        "date": "31.12.1999",
        "value": base_value
    }]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º
    sorted_periods = sorted(moex_data.keys())
    
    for period in sorted_periods:
        year, month = period.split('-')
        year, month = int(year), int(month)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        last_day = calendar.monthrange(year, month)[1]
        date_str = f"{last_day:02d}.{month:02d}.{year}"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        monthly_return = moex_data[period]
        current_value = current_value * (1 + monthly_return)
        
        result.append({
            "date": date_str,
            "value": round(current_value, 2)
        })
    
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")
    print(f"   –ü–µ—Ä–∏–æ–¥: {result[0]['date']} - {result[-1]['date']}")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {result[0]['value']} - {result[-1]['value']}")
    
    return result

def update_main_data_with_stocks(main_data, new_stocks_data):
    """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ü–∏—è–º –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ...")
    
    updated = False
    
    for tool in main_data['tools']:
        if tool.get('name') == '–ê–∫—Ü–∏–∏' and tool.get('code') == 'stock':
            old_count = len(tool.get('items', []))
            tool['items'] = new_stocks_data
            new_count = len(new_stocks_data)
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º:")
            print(f"   –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: {old_count}")
            print(f"   –°—Ç–∞–ª–æ –∑–∞–ø–∏—Å–µ–π: {new_count}")
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {new_count - old_count} –∑–∞–ø–∏—Å–µ–π")
            
            updated = True
            break
    
    if not updated:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Å –∞–∫—Ü–∏—è–º–∏ –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ")
        return False
    
    return True

def backup_original_file():
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    try:
        with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
            original_data = f.read()
        
        with open('data/all_data_final_backup.json', 'w', encoding='utf-8') as f:
            f.write(original_data)
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: data/all_data_final_backup.json")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def main():
    print("üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û –ê–ö–¶–ò–Ø–ú\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if not backup_original_file():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é.")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        moex_data = load_moex_stocks()
        main_data = load_main_data()
        
        print(f"   stocks_moex.json: {len(moex_data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   all_data_final.json: {len(main_data['tools'])} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ MOEX –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        print("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞...")
        new_stocks_data = convert_moex_to_accumulated_format(moex_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
        print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        if update_main_data_with_stocks(main_data, new_stocks_data):
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            with open('data/all_data_final.json', 'w', encoding='utf-8') as f:
                json.dump(main_data, f, ensure_ascii=False, indent=2)
            
            print("‚úÖ –§–∞–π–ª all_data_final.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
            
            # –ù–∞–π–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for tool in main_data['tools']:
                if tool.get('name') == '–ê–∫—Ü–∏–∏':
                    updated_stocks = tool['items']
                    print(f"   –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {updated_stocks[0]['date']} - {updated_stocks[-1]['date']}")
                    print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(updated_stocks)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
                    last_date = datetime.strptime(updated_stocks[-1]['date'], '%d.%m.%Y')
                    current_date = datetime(2025, 5, 31)
                    
                    if last_date >= current_date:
                        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–æ –º–∞—è 2025!")
                    else:
                        months_behind = (current_date.year - last_date.year) * 12 + (current_date.month - last_date.month)
                        print(f"   ‚ö†Ô∏è  –û—Ç—Å—Ç–∞—é—Ç –Ω–∞ {months_behind} –º–µ—Å—è—Ü–µ–≤")
                    break
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        print("üí° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: data/all_data_final_backup.json")

if __name__ == "__main__":
    main() 