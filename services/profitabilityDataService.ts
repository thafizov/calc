// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
export interface DataItem {
  date: string;
  value: number;
}

interface Tool {
  name: string;
  code: string;
  sort: number;
  items: DataItem[] | Tool[];
}

interface ApiData {
  tools: Tool[];
}

export interface ProfitabilityDataResponse {
  inflation?: DataItem[];
  deposits?: DataItem[];
  bonds?: DataItem[];
  stocks?: DataItem[];
}

export interface ProfitabilityDataRequest {
  startDate: string; // YYYY-MM-DD
  endDate: string;   // YYYY-MM-DD
  instruments: string[];
  depositTerm?: string;
  bondType?: string;
}

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let cachedData: ApiData | null = null;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON)
const loadData = async (): Promise<ApiData> => {
  if (cachedData) {
    return cachedData;
  }

  try {
    const response = await fetch('/data/all_data_final.json');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    cachedData = await response.json();
    return cachedData;
  } catch (error) {
    console.error('Error loading data:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∫–æ–¥—É
const findToolByCode = (data: ApiData, code: string): Tool | null => {
  for (const tool of data.tools) {
    if (tool.code === code) {
      return tool;
    }
    // –ü–æ–∏—Å–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (tool.items && tool.items.length > 0 && 'code' in tool.items[0]) {
      for (const item of tool.items as Tool[]) {
        if (item.code === code) {
          return item;
        }
        // –ï—â–µ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        if (item.items && item.items.length > 0 && 'code' in item.items[0]) {
          for (const subItem of item.items as Tool[]) {
            if (subItem.code === code) {
              return subItem;
            }
          }
        }
      }
    }
  }
  return null;
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º
const filterDataByDates = (items: DataItem[], startDate: string, endDate: string): DataItem[] => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  console.log('üóìÔ∏è Filtering data by dates:', { startDate, endDate, totalItems: items.length });
  console.log('üóìÔ∏è Start/End objects:', { start: start.toISOString(), end: end.toISOString() });
  
  const filtered = items.filter((item, index) => {
    const itemDate = new Date(item.date.split('.').reverse().join('-')); // DD.MM.YYYY -> YYYY-MM-DD
    const included = itemDate >= start && itemDate <= end;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (index < 5 || index >= items.length - 5) {
      console.log(`üóìÔ∏è ${item.date} -> ${itemDate.toISOString().split('T')[0]}: ${included ? 'INCLUDED' : 'EXCLUDED'}`);
    }
    
    return included;
  });
  
  console.log('üóìÔ∏è Filtered result:', { 
    filteredItems: filtered.length,
    firstDate: filtered[0]?.date,
    lastDate: filtered[filtered.length - 1]?.date,
    firstFewDates: filtered.slice(0, 3).map(d => d.date),
    lastFewDates: filtered.slice(-3).map(d => d.date)
  });
  
  return filtered;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∞ API —Ä–æ—É—Ç–∞)
export const fetchProfitabilityData = async (
  request: ProfitabilityDataRequest
): Promise<ProfitabilityDataResponse> => {
  try {
    const { startDate, endDate, instruments, depositTerm, bondType } = request;

    if (!startDate || !endDate || !instruments || instruments.length === 0) {
      throw new Error('Missing required parameters');
    }

    const data = await loadData();
    const result: Record<string, DataItem[]> = {};

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    if (instruments.includes('inflation')) {
      const inflationTool = findToolByCode(data, 'inflation');
      if (inflationTool && inflationTool.items && 'date' in inflationTool.items[0]) {
        result.inflation = filterDataByDates(inflationTool.items as DataItem[], startDate, endDate);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º
    if (instruments.includes('deposits')) {
      let depositCode = 'deposit_ruble_1'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      switch (depositTerm) {
        case 'less_than_1_year':
          depositCode = 'deposit_ruble_1';
          break;
        case '1_to_3_years':
          depositCode = 'deposit_ruble_1_3';
          break;
        case 'more_than_3_years':
          depositCode = 'deposit_ruble_3';
          break;
      }

      const depositTool = findToolByCode(data, depositCode);
      if (depositTool && depositTool.items && 'date' in depositTool.items[0]) {
        result.deposits = filterDataByDates(depositTool.items as DataItem[], startDate, endDate);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º
    if (instruments.includes('bonds')) {
      let bondCode = 'bonds_ofz'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      switch (bondType) {
        case 'ofz':
          bondCode = 'bonds_ofz';
          break;
        case 'corporate':
          bondCode = 'bonds_corporate';
          break;
        case 'municipal':
          bondCode = 'bonds_ofz'; // –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –û–§–ó
          break;
      }

      const bondTool = findToolByCode(data, bondCode);
      if (bondTool && bondTool.items && 'date' in bondTool.items[0]) {
        result.bonds = filterDataByDates(bondTool.items as DataItem[], startDate, endDate);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º
    if (instruments.includes('stocks')) {
      const stockTool = findToolByCode(data, 'stock');
      if (stockTool && stockTool.items && 'date' in stockTool.items[0]) {
        result.stocks = filterDataByDates(stockTool.items as DataItem[], startDate, endDate);
      }
    }

    return result as ProfitabilityDataResponse;
  } catch (error) {
    console.error('Error fetching profitability data:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã –∏–∑ Date –≤ —Å—Ç—Ä–æ–∫—É YYYY-MM-DD
export const formatDateForApi = (date: Date): string => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ UTC, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–¥–≤–∏–≥–∞ –¥–∞—Ç –∏–∑-–∑–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã –∏–∑ DD.MM.YYYY –≤ Date
export const parseApiDate = (dateStr: string): Date => {
  const [day, month, year] = dateStr.split('.');
  return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const calculateDepositProfitability = (
  amount: number,
  data: DataItem[]
): { finalAmount: number; profit: number; profitPercentage: number; monthlyData: { month: string; cumulativeReturn: number; value: number }[] } => {
  if (!data || data.length === 0) {
    return { finalAmount: amount, profit: 0, profitPercentage: 0, monthlyData: [] };
  }

  console.log('üí≥ Deposit calculation input:', { amount, dataLength: data.length });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
  const sortedData = [...data].sort((a, b) => 
    parseApiDate(a.date).getTime() - parseApiDate(b.date).getTime()
  );

  console.log('üí≥ Sorted deposit data sample:', sortedData.slice(0, 5));

  let cumulativeAmount = amount;
  const monthlyData: { month: string; cumulativeReturn: number; value: number }[] = [];

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
  sortedData.forEach((dataPoint, index) => {
    const date = parseApiDate(dataPoint.date);
    const month = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞–≤–∫—É (–≥–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ / 12)
    const monthlyRate = dataPoint.value / 100 / 12;
    cumulativeAmount = cumulativeAmount * (1 + monthlyRate);
    
    const cumulativeReturn = ((cumulativeAmount - amount) / amount) * 100;
    
    monthlyData.push({
      month,
      cumulativeReturn,
      value: dataPoint.value
    });
  });

  const finalAmount = cumulativeAmount;
  const profit = finalAmount - amount;
  const profitPercentage = (profit / amount) * 100;

  console.log('üí≥ Deposit calculation:', { 
    finalAmount, 
    profit, 
    profitPercentage,
    monthlyDataLength: monthlyData.length
  });

  return { finalAmount, profit, profitPercentage, monthlyData };
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –æ–±–ª–∏–≥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞
export const calculateBondProfitability = (
  amount: number,
  data: DataItem[]
): { finalAmount: number; profit: number; profitPercentage: number; monthlyData: { month: string; cumulativeReturn: number; value: number }[] } => {
  if (!data || data.length < 2) {
    return { finalAmount: amount, profit: 0, profitPercentage: 0, monthlyData: [] };
  }

  console.log('üìà Bond calculation input:', { amount, dataLength: data.length });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
  const sortedData = [...data].sort((a, b) => 
    parseApiDate(a.date).getTime() - parseApiDate(b.date).getTime()
  );

  console.log('üìà Bond data sample:', {
    first: sortedData[0],
    last: sortedData[sortedData.length - 1],
    sample: sortedData.slice(0, 3)
  });

  const startValue = sortedData[0].value;
  const monthlyData: { month: string; cumulativeReturn: number; value: number }[] = [];

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
  sortedData.forEach((dataPoint, index) => {
    const date = parseApiDate(dataPoint.date);
    const month = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
    
    // –†–æ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const indexGrowth = dataPoint.value / startValue;
    const currentAmount = amount * indexGrowth;
    const cumulativeReturn = ((currentAmount - amount) / amount) * 100;
    
    monthlyData.push({
      month,
      cumulativeReturn,
      value: dataPoint.value
    });
  });

  const endValue = sortedData[sortedData.length - 1].value;
  const indexGrowth = endValue / startValue;
  const finalAmount = amount * indexGrowth;
  const profit = finalAmount - amount;
  const profitPercentage = (profit / amount) * 100;

  console.log('üìà Bond calculation:', { 
    indexGrowth, 
    finalAmount, 
    profit, 
    profitPercentage,
    monthlyDataLength: monthlyData.length
  });

  return { finalAmount, profit, profitPercentage, monthlyData };
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞
export const calculateStockProfitability = (
  amount: number,
  data: DataItem[]
): { finalAmount: number; profit: number; profitPercentage: number; monthlyData: { month: string; cumulativeReturn: number; value: number }[] } => {
  if (!data || data.length < 2) {
    return { finalAmount: amount, profit: 0, profitPercentage: 0, monthlyData: [] };
  }

  console.log('üìä Stock calculation input:', { amount, dataLength: data.length });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
  const sortedData = [...data].sort((a, b) => 
    parseApiDate(a.date).getTime() - parseApiDate(b.date).getTime()
  );

  console.log('üìä Stock data sample:', {
    first: sortedData[0],
    last: sortedData[sortedData.length - 1],
    sample: sortedData.slice(0, 3)
  });

  const startValue = sortedData[0].value;
  const monthlyData: { month: string; cumulativeReturn: number; value: number }[] = [];

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
  sortedData.forEach((dataPoint, index) => {
    const date = parseApiDate(dataPoint.date);
    const month = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
    
    // –†–æ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const indexGrowth = dataPoint.value / startValue;
    const currentAmount = amount * indexGrowth;
    const cumulativeReturn = ((currentAmount - amount) / amount) * 100;
    
    monthlyData.push({
      month,
      cumulativeReturn,
      value: dataPoint.value
    });
  });

  const endValue = sortedData[sortedData.length - 1].value;
  const indexGrowth = endValue / startValue;
  const finalAmount = amount * indexGrowth;
  const profit = finalAmount - amount;
  const profitPercentage = (profit / amount) * 100;

  console.log('üìä Stock calculation:', { 
    indexGrowth, 
    finalAmount, 
    profit, 
    profitPercentage,
    monthlyDataLength: monthlyData.length
  });

  return { finalAmount, profit, profitPercentage, monthlyData };
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏
export const calculateInflationAdjustedProfitability = (
  profitPercentage: number,
  inflationData: DataItem[]
): number => {
  if (!inflationData || inflationData.length === 0) {
    return profitPercentage;
  }

  console.log('üíπ Inflation adjustment calculation:', { 
    profitPercentage, 
    inflationDataLength: inflationData.length,
    inflationSample: inflationData.slice(0, 3),
    inflationPeriod: inflationData[0]?.date + ' - ' + inflationData[inflationData.length - 1]?.date
  });

  // ‚ö†Ô∏è –í–ê–ñ–ù–û: inflationData —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –ø–µ—Ä–∏–æ–¥—É –≤ fetchProfitabilityData
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–ª—è—Ü–∏—é —Ç–æ–ª—å–∫–æ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–µ –∑–∞ –≤—Å–µ –≥–æ–¥—ã!)
  let totalInflation = 1;
  for (const item of inflationData) {
    totalInflation *= (1 + item.value); // item.value —É–∂–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –¥—Ä–æ–±–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0233 –¥–ª—è 2.33%)
  }
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: (1 + –Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è) / (1 + –∏–Ω—Ñ–ª—è—Ü–∏—è) - 1
  const nominalReturnDecimal = profitPercentage / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
  const realReturnDecimal = (1 + nominalReturnDecimal) / totalInflation - 1;
  
  const result = realReturnDecimal * 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
  
  console.log('üíπ Inflation adjustment result:', { 
    totalInflation: totalInflation.toFixed(4),
    totalInflationPercent: ((totalInflation - 1) * 100).toFixed(2) + '%',
    nominalReturn: profitPercentage.toFixed(2) + '%',
    realReturn: result.toFixed(2) + '%',
    periodUsed: inflationData.length + ' months'
  });
  
  return result;
}; 