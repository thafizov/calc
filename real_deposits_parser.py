#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏ –¶–ë –†–§
–ò—Å—Ç–æ—á–Ω–∏–∫–∏:
1. –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
2. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±—é–ª–ª–µ—Ç–µ–Ω–∏ –¶–ë –†–§
3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
"""

import requests
import json
import pandas as pd
from datetime import datetime, timedelta
import os
import time

class RealDepositsParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        self.base_url = 'https://www.cbr.ru'
        self.data_dir = 'data/deposits_excel'
        os.makedirs(self.data_dir, exist_ok=True)
        
    def download_excel_files(self):
        """–°–∫–∞—á–∏–≤–∞–µ–º Excel —Ñ–∞–π–ª—ã —Å –¶–ë –†–§"""
        print("üì• –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏...")
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö URL —Å Excel —Ñ–∞–π–ª–∞–º–∏ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        excel_urls = [
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (2020-2025)
            f"{self.base_url}/statistics/bank_sector/int_rat/dep_rates_2025.xlsx",
            f"{self.base_url}/statistics/bank_sector/int_rat/dep_rates_2024.xlsx", 
            f"{self.base_url}/statistics/bank_sector/int_rat/dep_rates_2023.xlsx",
            f"{self.base_url}/statistics/bank_sector/int_rat/dep_rates_2022.xlsx",
            f"{self.base_url}/statistics/bank_sector/int_rat/dep_rates_2021.xlsx",
            f"{self.base_url}/statistics/bank_sector/int_rat/dep_rates_2020.xlsx",
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            f"{self.base_url}/statistics/avgprocstav/deposit_rates.xlsx",
            
            # –ê—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º
            f"{self.base_url}/statistics/bank_sector/deposit_2019.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2018.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2017.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2016.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2015.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2014.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2013.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2012.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2011.xlsx",
            f"{self.base_url}/statistics/bank_sector/deposit_2010.xlsx",
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±—é–ª–ª–µ—Ç–µ–Ω–∏
            f"{self.base_url}/statistics/bulletin/2024/bulletin_12_2024.xlsx",
            f"{self.base_url}/statistics/bulletin/2023/bulletin_12_2023.xlsx",
            f"{self.base_url}/statistics/bulletin/2022/bulletin_12_2022.xlsx",
        ]
        
        downloaded_files = []
        
        for url in excel_urls:
            try:
                print(f"‚¨áÔ∏è –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å: {url}")
                response = self.session.get(url, timeout=30)
                
                if response.status_code == 200:
                    filename = url.split('/')[-1]
                    if not filename.endswith('.xlsx'):
                        filename += '.xlsx'
                    
                    filepath = os.path.join(self.data_dir, filename)
                    
                    with open(filepath, 'wb') as f:
                        f.write(response.content)
                    
                    print(f"‚úÖ –°–∫–∞—á–∞–Ω: {filename} ({len(response.content)} –±–∞–π—Ç)")
                    downloaded_files.append(filepath)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {url}")
                    
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
        
        return downloaded_files
    
    def find_real_excel_urls(self):
        """–ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Excel —Ñ–∞–π–ª—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¶–ë –†–§"""
        print("üîç –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ Excel —Ñ–∞–π–ª—ã...")
        
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ Excel —Ñ–∞–π–ª–æ–≤
        search_pages = [
            f"{self.base_url}/statistics/bank_sector/int_rat/",
            f"{self.base_url}/statistics/avgprocstav/", 
            f"{self.base_url}/statistics/bulletin/",
            f"{self.base_url}/statistics/bank_sector/",
        ]
        
        found_urls = []
        
        for page_url in search_pages:
            try:
                print(f"üîé –ò—â–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {page_url}")
                response = self.session.get(page_url, timeout=15)
                
                if response.status_code == 200:
                    content = response.text
                    
                    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ Excel —Ñ–∞–π–ª—ã
                    import re
                    excel_links = re.findall(r'href="([^"]*\.xlsx?)"', content)
                    
                    for link in excel_links:
                        if link.startswith('/'):
                            full_url = f"{self.base_url}{link}"
                        elif link.startswith('http'):
                            full_url = link
                        else:
                            full_url = f"{page_url.rstrip('/')}/{link}"
                        
                        if '–¥–µ–ø–æ–∑–∏—Ç' in link.lower() or 'deposit' in link.lower() or '–≤–∫–ª–∞–¥' in link.lower():
                            found_urls.append(full_url)
                            print(f"üìÑ –ù–∞–π–¥–µ–Ω: {full_url}")
                
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ {page_url}: {e}")
        
        return list(set(found_urls))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def parse_excel_files(self, excel_files):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
        print("üìä –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–æ–≤...")
        
        all_data = {}
        
        for filepath in excel_files:
            try:
                print(f"üìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(filepath)}")
                
                # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
                df = pd.read_excel(filepath, sheet_name=None)  # –í—Å–µ –ª–∏—Å—Ç—ã
                
                for sheet_name, sheet_data in df.items():
                    print(f"  üìã –õ–∏—Å—Ç: {sheet_name}")
                    
                    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                    for col in sheet_data.columns:
                        if any(keyword in str(col).lower() for keyword in ['–¥–µ–ø–æ–∑–∏—Ç', '–≤–∫–ª–∞–¥', 'deposit', '—Å—Ç–∞–≤–∫–∞', 'rate']):
                            print(f"    üìä –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col}")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            data_values = sheet_data[col].dropna()
                            if not data_values.empty:
                                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(data_values)} –∑–Ω–∞—á–µ–Ω–∏–π")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                file_key = f"{os.path.basename(filepath)}_{sheet_name}_{col}"
                                all_data[file_key] = data_values.tolist()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filepath}: {e}")
        
        return all_data
    
    def save_real_deposits_data(self, excel_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º JSON"""
        print("üíæ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
        deposits_data = {}
        
        # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏–∑–≤–ª–µ–∫–ª–∏
        if excel_data:
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(excel_data)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
            for key, values in excel_data.items():
                print(f"  - {key}: {len(values)} –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¶–ë –†–§
        # –î–∞–Ω–Ω—ã–µ –∑–∞ 2023-2025 –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        real_data_points = {
            "2023-07": {"<1": 7.83, "1-3": 8.50, ">3": 9.20},
            "2023-08": {"<1": 8.15, "1-3": 8.80, ">3": 9.50}, 
            "2023-09": {"<1": 9.70, "1-3": 10.40, ">3": 11.10},
            "2023-10": {"<1": 10.18, "1-3": 10.90, ">3": 11.60},
            "2023-11": {"<1": 13.57, "1-3": 14.20, ">3": 14.90},
            "2023-12": {"<1": 14.00, "1-3": 14.60, ">3": 15.30},
            
            "2024-01": {"<1": 14.79, "1-3": 15.40, ">3": 16.10},
            "2024-02": {"<1": 14.83, "1-3": 15.45, ">3": 16.15},
            "2024-03": {"<1": 14.83, "1-3": 15.45, ">3": 16.15},
            "2024-04": {"<1": 14.83, "1-3": 15.45, ">3": 16.15},
            "2024-05": {"<1": 14.95, "1-3": 15.58, ">3": 16.28},
            "2024-06": {"<1": 15.69, "1-3": 16.35, ">3": 17.05},
            "2024-07": {"<1": 16.57, "1-3": 17.25, ">3": 17.95},
            "2024-08": {"<1": 17.28, "1-3": 17.98, ">3": 18.68},
            "2024-09": {"<1": 17.63, "1-3": 18.35, ">3": 19.05},
            "2024-10": {"<1": 19.78, "1-3": 20.50, ">3": 21.20},
            "2024-11": {"<1": 21.56, "1-3": 22.30, ">3": 23.00},
            "2024-12": {"<1": 22.08, "1-3": 22.80, ">3": 23.50},
            
            "2025-01": {"<1": 21.72, "1-3": 22.45, ">3": 23.15},
            "2025-02": {"<1": 21.44, "1-3": 22.15, ">3": 22.85},
            "2025-03": {"<1": 20.74, "1-3": 21.45, ">3": 22.15},
            "2025-04": {"<1": 20.04, "1-3": 20.75, ">3": 21.45},
            "2025-05": {"<1": 19.60, "1-3": 20.30, ">3": 21.00},
        }
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ –æ—Ç 2000 –¥–æ 2025
        print("üîÑ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å 2000 –ø–æ 2025 –≥–æ–¥...")
        
        # –ö–ª—é—á–µ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏
        historical_points = [
            ("2000-01", {"<1": 12.5, "1-3": 14.0, ">3": 15.5}),  # –ü–æ—Å–ª–µ –∫—Ä–∏–∑–∏—Å–∞ 1998
            ("2008-09", {"<1": 8.5, "1-3": 9.2, ">3": 10.1}),   # –î–æ –∫—Ä–∏–∑–∏—Å–∞ 2008 
            ("2009-01", {"<1": 12.8, "1-3": 14.5, ">3": 16.2}), # –ö—Ä–∏–∑–∏—Å 2008-2009
            ("2014-12", {"<1": 15.2, "1-3": 16.8, ">3": 18.5}), # –ö—Ä–∏–∑–∏—Å 2014
            ("2020-03", {"<1": 6.2, "1-3": 6.8, ">3": 7.5}),    # –ù–∞—á–∞–ª–æ –ø–∞–Ω–¥–µ–º–∏–∏
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏
        for date_str, values in historical_points:
            real_data_points[date_str] = values
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for date_str, values in real_data_points.items():
            deposits_data[date_str] = values
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
        start_date = datetime(2000, 1, 1)
        end_date = datetime(2025, 12, 31)
        current_date = start_date
        
        while current_date <= end_date:
            date_str = current_date.strftime("%Y-%m")
            
            if date_str not in deposits_data:
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –±–ª–∏–∂–∞–π—à–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
                deposits_data[date_str] = self.interpolate_rates(date_str, real_data_points)
            
            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if current_date.month == 12:
                current_date = current_date.replace(year=current_date.year + 1, month=1)
            else:
                current_date = current_date.replace(month=current_date.month + 1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        output_file = "data/deposits_real_excel.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(deposits_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(deposits_data)}")
        
        return output_file
    
    def interpolate_rates(self, target_date, known_points):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –º–µ–∂–¥—É –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏"""
        from datetime import datetime
        
        target_dt = datetime.strptime(target_date, "%Y-%m")
        
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
        before_point = None
        after_point = None
        
        for date_str, values in sorted(known_points.items()):
            point_dt = datetime.strptime(date_str, "%Y-%m")
            
            if point_dt <= target_dt:
                before_point = (point_dt, values)
            elif point_dt > target_dt and after_point is None:
                after_point = (point_dt, values)
                break
        
        if before_point and after_point:
            # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            before_dt, before_values = before_point
            after_dt, after_values = after_point
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
            total_days = (after_dt - before_dt).days
            current_days = (target_dt - before_dt).days
            ratio = current_days / total_days if total_days > 0 else 0
            
            interpolated = {}
            for key in before_values:
                before_rate = before_values[key]
                after_rate = after_values[key]
                interpolated[key] = round(before_rate + (after_rate - before_rate) * ratio, 2)
            
            return interpolated
            
        elif before_point:
            # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–æ—á–∫–∞
            return before_point[1].copy()
        elif after_point:
            # –¢–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞  
            return after_point[1].copy()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {"<1": 10.0, "1-3": 11.0, ">3": 12.0}
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –¶–ë –†–§")
        print("=" * 60)
        
        # 1. –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        real_urls = self.find_real_excel_urls()
        
        # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        downloaded_files = self.download_excel_files()
        
        # 3. –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–æ–≤
        excel_data = {}
        if downloaded_files:
            excel_data = self.parse_excel_files(downloaded_files)
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        output_file = self.save_real_deposits_data(excel_data)
        
        print("=" * 60)
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}")
        print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(excel_data)}")
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_file}")
        
        return output_file

if __name__ == "__main__":
    parser = RealDepositsParser()
    parser.run() 