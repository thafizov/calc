#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ JSON —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¶–ë –†–§
"""

import json
from datetime import datetime, timedelta

def create_correct_deposits_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏...")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¶–ë –†–§
    real_key_points = {
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        "2000-01": {"<1": 12.5, "1-3": 14.0, ">3": 15.5},   # –ü–æ—Å–ª–µ –∫—Ä–∏–∑–∏—Å–∞ 1998
        "2008-09": {"<1": 8.5, "1-3": 9.2, ">3": 10.1},    # –ü–µ—Ä–µ–¥ –∫—Ä–∏–∑–∏—Å–æ–º 2008
        "2009-03": {"<1": 14.2, "1-3": 15.8, ">3": 17.5},  # –ü–∏–∫ –∫—Ä–∏–∑–∏—Å–∞ 2008-2009
        "2014-12": {"<1": 15.8, "1-3": 17.2, ">3": 19.1},  # –ö—Ä–∏–∑–∏—Å 2014-2015
        "2020-04": {"<1": 5.8, "1-3": 6.3, ">3": 7.1},     # –ü–∞–Ω–¥–µ–º–∏—è - –Ω–∏–∑–∫–∏–µ —Å—Ç–∞–≤–∫–∏
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 2023-2024 (–∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¶–ë –†–§) 
        "2023-07": {"<1": 7.83, "1-3": 8.50, ">3": 9.20},
        "2023-11": {"<1": 13.57, "1-3": 14.20, ">3": 14.90},
        "2024-01": {"<1": 14.79, "1-3": 15.40, ">3": 16.10},
        "2024-06": {"<1": 15.69, "1-3": 16.35, ">3": 17.05},
        "2024-10": {"<1": 19.78, "1-3": 20.50, ">3": 21.20},
        "2024-12": {"<1": 22.08, "1-3": 22.80, ">3": 23.50},
    }
    
    deposits_data = {}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã –æ—Ç 2000-01 –¥–æ 2025-05
    start_date = datetime(2000, 1, 1)
    end_date = datetime(2025, 5, 31)
    current_date = start_date
    
    print("üìä –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º...")
    
    while current_date <= end_date:
        date_str = current_date.strftime("%Y-%m")
        
        if date_str in real_key_points:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            deposits_data[date_str] = real_key_points[date_str]
            print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {date_str}")
        else:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É –±–ª–∏–∂–∞–π—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
            deposits_data[date_str] = interpolate_between_points(date_str, real_key_points)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        if current_date.month == 12:
            current_date = current_date.replace(year=current_date.year + 1, month=1)
        else:
            current_date = current_date.replace(month=current_date.month + 1)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    sorted_data = {}
    for date_str in sorted(deposits_data.keys()):
        sorted_data[date_str] = deposits_data[date_str]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
    output_file = "data/deposits.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(sorted_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª: {output_file}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(sorted_data)}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {min(sorted_data.keys())} - {max(sorted_data.keys())}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    print("\nüìà –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    dates_to_show = ["2000-01", "2008-09", "2014-12", "2020-04", "2023-07", "2024-12", "2025-05"]
    for date_str in dates_to_show:
        if date_str in sorted_data:
            data = sorted_data[date_str]
            print(f"  {date_str}: <1–≥={data['<1']}%, 1-3–≥={data['1-3']}%, >3–≥={data['>3']}%")
    
    return output_file

def interpolate_between_points(target_date, key_points):
    """–õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –±–ª–∏–∂–∞–π—à–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏"""
    target_dt = datetime.strptime(target_date, "%Y-%m")
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ
    before_point = None
    after_point = None
    
    for date_str in sorted(key_points.keys()):
        point_dt = datetime.strptime(date_str, "%Y-%m")
        
        if point_dt <= target_dt:
            before_point = (point_dt, key_points[date_str])
        elif point_dt > target_dt and after_point is None:
            after_point = (point_dt, key_points[date_str])
            break
    
    if before_point and after_point:
        # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
        before_dt, before_values = before_point
        after_dt, after_values = after_point
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        total_months = (after_dt.year - before_dt.year) * 12 + (after_dt.month - before_dt.month)
        current_months = (target_dt.year - before_dt.year) * 12 + (target_dt.month - before_dt.month)
        ratio = current_months / total_months if total_months > 0 else 0
        
        result = {}
        for key in before_values:
            before_rate = before_values[key]
            after_rate = after_values[key]
            interpolated_rate = before_rate + (after_rate - before_rate) * ratio
            result[key] = round(interpolated_rate, 2)
        
        return result
    
    elif before_point:
        # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        return before_point[1].copy()
    elif after_point:
        # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –æ—Ç –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
        return after_point[1].copy()
    else:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
        return {"<1": 10.0, "1-3": 11.0, ">3": 12.0}

if __name__ == "__main__":
    create_correct_deposits_data() 