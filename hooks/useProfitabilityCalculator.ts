import { useState, useEffect } from 'react';
import { 
  fetchProfitabilityData, 
  formatDateForApi,
  parseApiDate,
  calculateDepositProfitability,
  calculateBondProfitability,
  calculateStockProfitability,
  calculateInflationAdjustedProfitability,
  type ProfitabilityDataResponse
} from '../services/profitabilityDataService';

// –¢–∏–ø—ã –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
interface ProfitabilityErrors {
  amount?: string;
  startDate?: string;
  endDate?: string;
}

// –¢–∏–ø –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
interface MonthlyChartData {
  month: string; // "2024-01"
  [instrumentName: string]: string | number; // "–î–µ–ø–æ–∑–∏—Ç": 5.2, "–û–±–ª–∏–≥–∞—Ü–∏–∏": 3.1, etc.
}

// –¢–∏–ø –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
interface ProfitabilityResult {
  instrument: string;
  finalAmount: number;
  profit: number;
  profitPercentage: number;
  inflationAdjustedProfit?: number;
  monthlyData?: { month: string; cumulativeReturn: number; value?: number }[]; // –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
}

// –¢–∏–ø –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
interface CalculatorParams {
  amount: string;
  startDate: string;
  endDate: string;
  instruments: string[];
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
const formatAmount = (value: string): string => {
  const cleanValue = value.replace(/[^\d]/g, '');
  if (cleanValue === '') return '';
  
  const number = parseInt(cleanValue);
  return number.toLocaleString('ru-RU');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ)
const getMaxAvailableDate = (): Date => {
  const now = new Date();
  const maxDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  maxDate.setMonth(maxDate.getMonth() + 1, 0);
  return maxDate;
};

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã
const validateAmount = (value: string): string | undefined => {
  const cleanValue = value.replace(/[^\d]/g, '');
  const numValue = parseInt(cleanValue) || 0;
  
  if (numValue === 0) {
    return '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏–π';
  }
  if (numValue < 1000) {
    return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1 000 ‚ÇΩ';
  }
  if (numValue > 100000000) {
    return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 100 000 000 ‚ÇΩ';
  }
  return undefined;
};

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç
const validateDates = (startDate: Date | null, endDate: Date | null): { startDate?: string; endDate?: string } => {
  const errors: { startDate?: string; endDate?: string } = {};
  const maxDate = getMaxAvailableDate();
  
  if (!startDate) {
    errors.startDate = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞';
  }
  
  if (!endDate) {
    errors.endDate = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞';
  }
  
  if (startDate && endDate) {
    if (startDate >= endDate) {
      errors.endDate = '–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 1 –º–µ—Å—è—Ü)
    const diffInMonths = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
                        (endDate.getMonth() - startDate.getMonth());
    
    if (diffInMonths < 1) {
      errors.endDate = '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 1 –º–µ—Å—è—Ü';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 30 –ª–µ—Ç)
    if (diffInMonths > 360) {
      errors.endDate = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 30 –ª–µ—Ç';
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
  if (startDate && startDate > maxDate) {
    errors.startDate = '–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
  }
  
  if (endDate && endDate > maxDate) {
    errors.endDate = '–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
  }
  
  return errors;
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
const calculateMonthsBetween = (startDate: Date, endDate: Date): number => {
  return (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
         (endDate.getMonth() - startDate.getMonth());
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—É–∫–∞
export interface UseProfitabilityCalculatorResult {
  results: ProfitabilityResult[];
  isLoading: boolean;
  error: string | null;
  monthlyChartData: MonthlyChartData[];
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
export const useProfitabilityCalculator = (): {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  amount: string;
  startDate: Date | null;
  endDate: Date | null;
  errors: ProfitabilityErrors;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  error: string | null;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  inflationEnabled: boolean;
  setInflationEnabled: (enabled: boolean) => void;
  depositTerm: string;
  setDepositTerm: (term: string) => void;
  bondType: string;
  setBondType: (type: string) => void;
  
  // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  depositsChecked: boolean;
  setDepositsChecked: (checked: boolean) => void;
  bondsChecked: boolean;
  setBondsChecked: (checked: boolean) => void;
  stocksChecked: boolean;
  setStocksChecked: (checked: boolean) => void;
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  results: ProfitabilityResult[];
  monthlyChartData: MonthlyChartData[];
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setAmount: (value: string) => void;
  setDateRange: (start: Date | null, end: Date | null) => void;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  formatNumber: (num: number) => string;
} => {
  const [results, setResults] = useState<ProfitabilityResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [monthlyChartData, setMonthlyChartData] = useState<MonthlyChartData[]>([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [amount, setAmount] = useState<string>(formatAmount('1000000'));
  const [startDate, setStartDate] = useState<Date | null>(new Date(2024, 5, 1)); // –ò—é–Ω—å 2024
  const [endDate, setEndDate] = useState<Date | null>(new Date(2025, 4, 1)); // –ú–∞–π 2025
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [inflationEnabled, setInflationEnabled] = useState<boolean>(false);
  const [depositTerm, setDepositTerm] = useState<string>('less_than_1_year');
  const [bondType, setBondType] = useState<string>('ofz');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const [depositsChecked, setDepositsChecked] = useState<boolean>(true);
  const [bondsChecked, setBondsChecked] = useState<boolean>(false);
  const [stocksChecked, setStocksChecked] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const [errors, setErrors] = useState<ProfitabilityErrors>({});

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const handleAmountChange = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setAmount(formatAmount(cleanValue));
    setErrors(prev => ({ ...prev, amount: validateAmount(cleanValue) }));
  };

  const handleDateRangeChange = (start: Date | null, end: Date | null) => {
    setStartDate(start);
    setEndDate(end);
    
    const dateErrors = validateDates(start, end);
    setErrors(prev => ({ 
      ...prev, 
      startDate: dateErrors.startDate,
      endDate: dateErrors.endDate 
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatNumber = (value: number): string => {
    return Math.round(value).toLocaleString('ru-RU');
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    const dateErrors = validateDates(startDate, endDate);
    setErrors(prev => ({ 
      ...prev, 
      startDate: dateErrors.startDate,
      endDate: dateErrors.endDate 
    }));
  }, [startDate, endDate]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  useEffect(() => {
    const calculateResults = async () => {
      console.log('üîÑ Starting calculation...');
      
      const cleanAmount = amount.replace(/[^\d]/g, '');
      const numAmount = parseInt(cleanAmount) || 0;
      
      console.log('üí∞ Amount:', numAmount);
      console.log('üìÖ Dates:', { startDate, endDate });
      console.log('üéØ Selected instruments:', { depositsChecked, bondsChecked, stocksChecked, inflationEnabled });
      
      if (numAmount === 0 || !startDate || !endDate) {
        console.log('‚ùå Missing data, clearing results');
        setResults([]);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç
      const dateErrors = validateDates(startDate, endDate);
      if (dateErrors.startDate || dateErrors.endDate) {
        console.log('‚ùå Date validation errors:', dateErrors);
        setResults([]);
        return;
      }

      console.log('‚è≥ Setting loading to true');
      setIsLoading(true);

      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        const instruments: string[] = [];
        if (depositsChecked) instruments.push('deposits');
        if (bondsChecked) instruments.push('bonds');
        if (stocksChecked) instruments.push('stocks');
        if (inflationEnabled) instruments.push('inflation');

        console.log('üì¶ Instruments to load:', instruments);

        if (instruments.length === 0) {
          console.log('‚ùå No instruments selected');
          setResults([]);
          setIsLoading(false);
          return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const requestData = {
          startDate: formatDateForApi(startDate),
          endDate: formatDateForApi(endDate),
          instruments,
          depositTerm,
          bondType
        };
        
        console.log('üì° Fetching data with request:', requestData);
        console.log('üóìÔ∏è Actual dates used:', {
          startDateObject: startDate?.toISOString(),
          endDateObject: endDate?.toISOString(),
          startDateFormatted: formatDateForApi(startDate),
          endDateFormatted: formatDateForApi(endDate)
        });
        
        const apiData = await fetchProfitabilityData(requestData);
        
        console.log('üìä Received data:', {
          inflation: apiData.inflation?.length || 0,
          deposits: apiData.deposits?.length || 0,
          bonds: apiData.bonds?.length || 0,
          stocks: apiData.stocks?.length || 0,
        });

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if (apiData.deposits?.length) {
          console.log('üí≥ Deposits data sample:', apiData.deposits.slice(0, 3));
        }
        if (apiData.bonds?.length) {
          console.log('üìà Bonds data sample:', apiData.bonds.slice(0, 3));
        }
        if (apiData.stocks?.length) {
          console.log('üìä Stocks data sample:', apiData.stocks.slice(0, 3));
        }
        if (apiData.inflation?.length) {
          console.log('üíπ Inflation data sample:', apiData.inflation.slice(0, 3));
        }

        const newResults: ProfitabilityResult[] = [];
        let allMonthlyData: MonthlyChartData[] = [];

        // –†–∞—Å—á–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        if (depositsChecked && apiData.deposits) {
          console.log('üî¢ Calculating deposits...');
          const calculation = calculateDepositProfitability(numAmount, apiData.deposits);
          console.log('üí≥ Deposit calculation result:', calculation);
          
          let inflationAdjustedProfit;
          if (inflationEnabled && apiData.inflation) {
            inflationAdjustedProfit = calculateInflationAdjustedProfitability(
              calculation.profitPercentage, 
              apiData.inflation
            );
            console.log('üíπ Inflation adjusted profit:', inflationAdjustedProfit);
          }

          newResults.push({
            instrument: '–î–µ–ø–æ–∑–∏—Ç',
            finalAmount: calculation.finalAmount,
            profit: calculation.profit,
            profitPercentage: calculation.profitPercentage,
            inflationAdjustedProfit,
            monthlyData: calculation.monthlyData
          });
        }

        // –†–∞—Å—á–µ—Ç –æ–±–ª–∏–≥–∞—Ü–∏–π
        if (bondsChecked && apiData.bonds) {
          console.log('üî¢ Calculating bonds...');
          const calculation = calculateBondProfitability(numAmount, apiData.bonds);
          console.log('üìà Bond calculation result:', calculation);
          
          let inflationAdjustedProfit;
          if (inflationEnabled && apiData.inflation) {
            inflationAdjustedProfit = calculateInflationAdjustedProfitability(
              calculation.profitPercentage, 
              apiData.inflation
            );
          }

          newResults.push({
            instrument: '–û–±–ª–∏–≥–∞—Ü–∏–∏',
            finalAmount: calculation.finalAmount,
            profit: calculation.profit,
            profitPercentage: calculation.profitPercentage,
            inflationAdjustedProfit,
            monthlyData: calculation.monthlyData
          });
        }

        // –†–∞—Å—á–µ—Ç –∞–∫—Ü–∏–π
        if (stocksChecked && apiData.stocks) {
          console.log('üî¢ Calculating stocks...');
          const calculation = calculateStockProfitability(numAmount, apiData.stocks);
          console.log('üìä Stock calculation result:', calculation);
          
          let inflationAdjustedProfit;
          if (inflationEnabled && apiData.inflation) {
            inflationAdjustedProfit = calculateInflationAdjustedProfitability(
              calculation.profitPercentage, 
              apiData.inflation
            );
          }

          newResults.push({
            instrument: '–ê–∫—Ü–∏–∏',
            finalAmount: calculation.finalAmount,
            profit: calculation.profit,
            profitPercentage: calculation.profitPercentage,
            inflationAdjustedProfit,
            monthlyData: calculation.monthlyData
          });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        if (newResults.length > 0 && newResults[0].monthlyData) {
          const months = newResults[0].monthlyData.map(d => d.month);
          allMonthlyData = months.map((month, monthIndex) => {
            const chartDataPoint: MonthlyChartData = { month };
            
            newResults.forEach(result => {
              if (result.monthlyData) {
                const monthData = result.monthlyData.find(d => d.month === month);
                if (monthData) {
                  // –û–±—ã—á–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                  chartDataPoint[result.instrument] = monthData.cumulativeReturn;
                  
                  // –õ–∏–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                  if (inflationEnabled && result.inflationAdjustedProfit !== undefined && apiData.inflation) {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                    const sortedInflationData = [...apiData.inflation].sort((a, b) => 
                      parseApiDate(a.date).getTime() - parseApiDate(b.date).getTime()
                    );
                    
                    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã
                    // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                    const currentMonthInflationData = sortedInflationData.slice(0, monthIndex + 1);
                    
                    if (currentMonthInflationData.length > 0) {
                      // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è = —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å / –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                      const startInflationIndex = currentMonthInflationData[0].value;
                      const currentInflationIndex = currentMonthInflationData[currentMonthInflationData.length - 1].value;
                      const cumulativeInflationMultiplier = currentInflationIndex / startInflationIndex;
                      
                      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                      const nominalReturnDecimal = monthData.cumulativeReturn / 100;
                      const realReturnDecimal = (1 + nominalReturnDecimal) / cumulativeInflationMultiplier - 1;
                      const realReturn = realReturnDecimal * 100;
                      
                      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                      if (monthIndex < 3) {
                        console.log(`üìä Chart inflation calc for ${month}:`, {
                          monthIndex,
                          startInflationIndex: startInflationIndex.toFixed(2),
                          currentInflationIndex: currentInflationIndex.toFixed(2),
                          cumulativeInflationMultiplier: cumulativeInflationMultiplier.toFixed(4),
                          nominalReturn: monthData.cumulativeReturn.toFixed(2) + '%',
                          realReturn: realReturn.toFixed(2) + '%'
                        });
                      }
                      
                      chartDataPoint[`${result.instrument}_inflation`] = realReturn;
                    }
                  }
                }
              }
            });
            
            return chartDataPoint;
          });
        }

        console.log('‚úÖ Final results:', newResults);
        console.log('üìä Chart data:', allMonthlyData.slice(0, 3));
        setResults(newResults);
        setMonthlyChartData(allMonthlyData);
      } catch (error) {
        console.error('‚ùå Error calculating profitability:', error);
        setResults([]);
      } finally {
        console.log('‚èπ Setting loading to false');
        setIsLoading(false);
      }
    };

    calculateResults();
  }, [
    amount, 
    startDate, 
    endDate, 
    depositsChecked, 
    bondsChecked, 
    stocksChecked,
    depositTerm,
    bondType,
    inflationEnabled
  ]);

  return {
    results,
    isLoading,
    error,
    monthlyChartData,
    amount,
    startDate,
    endDate,
    errors,
    inflationEnabled,
    setInflationEnabled,
    depositTerm,
    setDepositTerm,
    bondType,
    setBondType,
    depositsChecked,
    setDepositsChecked,
    bondsChecked,
    setBondsChecked,
    stocksChecked,
    setStocksChecked,
    setAmount: handleAmountChange,
    setDateRange: handleDateRangeChange,
    formatNumber,
  };
}; 