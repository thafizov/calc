import { useState, useEffect } from 'react';

// –¢–∏–ø—ã –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
export interface BorrowerTestErrors {
  amount?: string;
  term?: string;
  rate?: string;
  monthlyPayment?: string;
  income1?: string;
  income2?: string;
  income3?: string;
  averageIncome?: string;
}

// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
export type CreditStatus = 'excellent' | 'good' | 'moderate' | 'high-risk';

export interface CreditAlert {
  status: CreditStatus;
  title: string;
  message: string;
  recommendations: string[];
  color: 'green' | 'yellow' | 'orange' | 'red';
  icon: '‚úÖ' | '‚ö†Ô∏è' | 'üî∂' | '‚ùå';
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
const validateAmount = (value: string): string | undefined => {
  const amount = parseFloat(value.replace(/[^\d.]/g, ''));
  if (isNaN(amount)) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
  if (amount < 10000) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ 10 000 ‚ÇΩ';
  if (amount > 5_000_000) return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ 5 000 000 ‚ÇΩ';
  return undefined;
};

const validateTerm = (months: number): string | undefined => {
  if (months <= 0) return '–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
  if (months < 3) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ 3 –º–µ—Å—è—Ü–∞';
  if (months > 84) return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ 84 –º–µ—Å—è—Ü–∞';
  return undefined;
};

const validateRate = (value: string): string | undefined => {
  const rate = parseFloat(value.replace(',', '.'));
  if (isNaN(rate)) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É';
  if (rate < 1) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1%';
  if (rate > 50) return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50%';
  return undefined;
};

const validateIncome = (value: string): string | undefined => {
  const income = parseFloat(value.replace(/[^\d]/g, ''));
  if (isNaN(income)) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ—Ö–æ–¥';
  if (income < 1000) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ 1 000 ‚ÇΩ';
  if (income > 10_000_000) return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ 10 000 000 ‚ÇΩ';
  return undefined;
};

const validateMonthlyPayment = (value: string, averageIncome: number): string | undefined => {
  const payment = parseFloat(value.replace(/[^\d]/g, ''));
  if (isNaN(payment)) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂';
  if (payment < 100) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ 100 ‚ÇΩ';
  if (payment > averageIncome * 0.8) return '–ü–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 80% –æ—Ç –¥–æ—Ö–æ–¥–∞';
  return undefined;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
export const formatNumber = (value: number): string => {
  return new Intl.NumberFormat('ru-RU', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
const formatAmount = (value: string): string => {
  const numbers = value.replace(/[^\d]/g, '');
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä –∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω—É–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  if (!numbers || parseInt(numbers) === 0) {
    return '';
  }
  
  const amount = parseInt(numbers);
  return new Intl.NumberFormat('ru-RU').format(amount);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
const formatRate = (value: string): string => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
  if (value === '') return '';
  
  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
  const cleanValue = value.replace(/[^\d.,]/g, '').replace(',', '.');
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–æ—á–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (cleanValue === '.') return cleanValue;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –Ω–µ—ë
  if (cleanValue.includes('.')) {
    const [whole, decimal] = cleanValue.split('.');
    return `${whole}.${(decimal || '').slice(0, 2)}`;
  }
  
  // –î–ª—è —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
  const rate = parseFloat(cleanValue);
  return isNaN(rate) ? '' : rate.toString();
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫
export const useBorrowerTest = () => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞
  const [amount, setAmount] = useState<string>(formatAmount('200000'));
  const [term, setTerm] = useState<string>('3');
  const [periodType, setPeriodType] = useState<'year' | 'month'>('year');
  const [rate, setRate] = useState<string>('5.00');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–µ–º—â–∏–∫–∞
  const [monthlyPayment, setMonthlyPayment] = useState<string>(formatAmount('10000'));
  const [income1, setIncome1] = useState<string>(formatAmount('30000'));
  const [income2, setIncome2] = useState<string>(formatAmount('30000'));
  const [income3, setIncome3] = useState<string>(formatAmount('30000'));
  const [averageIncome, setAverageIncome] = useState<string>(formatAmount('30000'));
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
  const [calculatedMonthlyPayment, setCalculatedMonthlyPayment] = useState<number>(0);
  const [calculatedAmount, setCalculatedAmount] = useState<number>(0);
  const [calculatedTerm, setCalculatedTerm] = useState<number>(0);
  const [totalInterest, setTotalInterest] = useState<number>(0);
  const [debtBurden, setDebtBurden] = useState<number>(0);
  const [remainingIncome, setRemainingIncome] = useState<number>(0);
  const [averageIncomeValue, setAverageIncomeValue] = useState<number>(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [creditAlert, setCreditAlert] = useState<CreditAlert | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI
  const [errors, setErrors] = useState<BorrowerTestErrors>({});

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const handleAmountChange = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setAmount(formatAmount(cleanValue));
    setErrors(prev => ({ ...prev, amount: validateAmount(cleanValue) }));
  };

  const handleTermChange = (value: string) => {
    if (value === '' || /^\d{1,3}$/.test(value)) {
      setTerm(value);
      const months = convertToMonths(value, periodType);
      setErrors(prev => ({ ...prev, term: validateTerm(months) }));
    }
  };

  const handleRateChange = (value: string) => {
    const formattedRate = formatRate(value);
    setRate(formattedRate);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ (—Å —Ç–æ—á–∫–æ–π –Ω–∞ –∫–æ–Ω—Ü–µ)
    if (formattedRate && !formattedRate.endsWith('.')) {
      setErrors(prev => ({ ...prev, rate: validateRate(formattedRate) }));
    } else {
      setErrors(prev => ({ ...prev, rate: undefined }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Ç–µ—Å—Ç–∞ –∑–∞–µ–º—â–∏–∫–∞
  const handleMonthlyPaymentChange = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setMonthlyPayment(formatAmount(cleanValue));
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ—Ö–æ–¥–∞
    const avgIncome = parseFloat(averageIncome.replace(/[^\d]/g, '')) || 0;
    setErrors(prev => ({ ...prev, monthlyPayment: validateMonthlyPayment(cleanValue, avgIncome) }));
  };

  const handleIncome1Change = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setIncome1(formatAmount(cleanValue));
    setErrors(prev => ({ ...prev, income1: validateIncome(cleanValue) }));
  };

  const handleIncome2Change = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setIncome2(formatAmount(cleanValue));
    setErrors(prev => ({ ...prev, income2: validateIncome(cleanValue) }));
  };

  const handleIncome3Change = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setIncome3(formatAmount(cleanValue));
    setErrors(prev => ({ ...prev, income3: validateIncome(cleanValue) }));
  };

  const handleAverageIncomeChange = (value: string) => {
    const cleanValue = value.replace(/[^\d]/g, '');
    setAverageIncome(formatAmount(cleanValue));
    setErrors(prev => ({ ...prev, averageIncome: validateIncome(cleanValue) }));
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ –º–µ—Å—è—Ü—ã
  const convertToMonths = (value: string, type: 'year' | 'month'): number => {
    const numValue = parseInt(value) || 0;
    return type === 'year' ? numValue * 12 : numValue;
  };

  // –†–∞—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    const calculateLoan = () => {
      const loanAmount = parseFloat(amount.replace(/[^\d]/g, ''));
      const loanRate = parseFloat(rate.replace(',', '.'));
      const months = convertToMonths(term, periodType);
      const monthlyRate = loanRate / 100 / 12; // –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞

      if (isNaN(loanAmount) || isNaN(loanRate) || months <= 0) {
        return;
      }

      // –†–∞—Å—á–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∞–Ω–Ω—É–∏—Ç–µ—Ç–∞
      // PMT = P * [r(1+r)^n] / [(1+r)^n - 1]
      let monthlyPaymentCalc = 0;
      if (monthlyRate > 0) {
        const denominator = Math.pow(1 + monthlyRate, months) - 1;
        const numerator = monthlyRate * Math.pow(1 + monthlyRate, months);
        monthlyPaymentCalc = loanAmount * (numerator / denominator);
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ 0%, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º —Å—É–º–º—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
        monthlyPaymentCalc = loanAmount / months;
      }

      // –û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞
      const totalPayment = monthlyPaymentCalc * months;
      const totalInterestCalc = totalPayment - loanAmount;

      // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ—Ö–æ–¥–∞
      const income1Value = parseFloat(income1.replace(/[^\d]/g, '')) || 0;
      const income2Value = parseFloat(income2.replace(/[^\d]/g, '')) || 0;
      const income3Value = parseFloat(income3.replace(/[^\d]/g, '')) || 0;
      const averageIncomeCalc = (income1Value + income2Value + income3Value) / 3;

      // –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (–ü–î–ù)
      const debtBurdenCalc = averageIncomeCalc > 0 ? (monthlyPaymentCalc / averageIncomeCalc) * 100 : 0;

      // –û—Å—Ç–∞—Ç–æ–∫ –¥–æ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç
      const remainingIncomeCalc = averageIncomeCalc - monthlyPaymentCalc;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      setCalculatedMonthlyPayment(monthlyPaymentCalc);
      setCalculatedAmount(loanAmount); // –î–ª—è —Ä–µ–∂–∏–º–∞ "–°—É–º–º–∞" –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      setCalculatedTerm(months); // –î–ª—è —Ä–µ–∂–∏–º–∞ "–°—Ä–æ–∫" –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      setTotalInterest(totalInterestCalc);
      setDebtBurden(debtBurdenCalc);
      setRemainingIncome(remainingIncomeCalc);
      setAverageIncomeValue(averageIncomeCalc);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      const alert = calculateCreditworthiness(
        monthlyPaymentCalc,
        averageIncomeCalc,
        debtBurdenCalc,
        remainingIncomeCalc
      );
      setCreditAlert(alert);
    };

    // –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ "–°—É–º–º–∞")
    const calculateMaxAmount = () => {
      const monthlyPaymentValue = parseFloat(monthlyPayment.replace(/[^\d]/g, ''));
      const loanRate = parseFloat(rate.replace(',', '.'));
      const months = convertToMonths(term, periodType);
      const monthlyRate = loanRate / 100 / 12;

      if (isNaN(monthlyPaymentValue) || isNaN(loanRate) || months <= 0 || monthlyPaymentValue <= 0) {
        return;
      }

      // –û–±—Ä–∞—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç–∞: P = PMT * [(1+r)^n - 1] / [r(1+r)^n]
      let maxAmount = 0;
      if (monthlyRate > 0) {
        const denominator = monthlyRate * Math.pow(1 + monthlyRate, months);
        const numerator = Math.pow(1 + monthlyRate, months) - 1;
        maxAmount = monthlyPaymentValue * (numerator / denominator);
      } else {
        maxAmount = monthlyPaymentValue * months;
      }

      setCalculatedAmount(maxAmount);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–ø–ª–∞—Ç—É
      const totalPayment = monthlyPaymentValue * months;
      const totalInterestCalc = totalPayment - maxAmount;
      setTotalInterest(totalInterestCalc);
    };

    // –†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ "–°—Ä–æ–∫")
    const calculateMinTerm = () => {
      const loanAmount = parseFloat(amount.replace(/[^\d]/g, ''));
      const monthlyPaymentValue = parseFloat(monthlyPayment.replace(/[^\d]/g, ''));
      const loanRate = parseFloat(rate.replace(',', '.'));
      const monthlyRate = loanRate / 100 / 12;

      if (isNaN(loanAmount) || isNaN(monthlyPaymentValue) || isNaN(loanRate) || 
          loanAmount <= 0 || monthlyPaymentValue <= 0) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±–æ–ª—å—à–µ –º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      const monthlyInterest = loanAmount * monthlyRate;
      if (monthlyPaymentValue <= monthlyInterest) {
        return;
      }

      // –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–æ–∫–∞: n = log(PMT / (PMT - P*r)) / log(1+r)
      let minTermMonths = 0;
      if (monthlyRate > 0) {
        const numerator = Math.log(monthlyPaymentValue / (monthlyPaymentValue - loanAmount * monthlyRate));
        const denominator = Math.log(1 + monthlyRate);
        minTermMonths = numerator / denominator;
      } else {
        minTermMonths = loanAmount / monthlyPaymentValue;
      }

      // –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–µ–≤
      minTermMonths = Math.ceil(minTermMonths);
      
      setCalculatedTerm(minTermMonths);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–ø–ª–∞—Ç—É
      const totalPayment = monthlyPaymentValue * minTermMonths;
      const totalInterestCalc = totalPayment - loanAmount;
      setTotalInterest(totalInterestCalc);
    };

    calculateLoan();
    calculateMaxAmount();
    calculateMinTerm();
  }, [amount, term, periodType, rate, monthlyPayment, income1, income2, income3, averageIncome]);

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  const calculateCreditworthiness = (
    monthlyPayment: number,
    averageIncome: number,
    debtBurden: number,
    remainingIncome: number
  ): CreditAlert => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
    const incomeToPaymentRatio = averageIncome > 0 ? averageIncome / monthlyPayment : 0;
    const minLivingExpenses = 15000; // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∂–∏–∑–Ω–∏
    
    if (debtBurden < 20 && incomeToPaymentRatio >= 3 && remainingIncome >= minLivingExpenses * 1.5) {
      return {
        status: 'excellent',
        title: '–û—Ç–ª–∏—á–Ω–∞—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å',
        message: '–ü—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞. –í–∞—à–∞ –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞, –∞ –¥–æ—Ö–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç.',
        recommendations: [
          '–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞',
          '–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏',
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è'
        ],
        color: 'green',
        icon: '‚úÖ'
      };
    }
    
    if (debtBurden < 35 && incomeToPaymentRatio >= 2 && remainingIncome >= minLivingExpenses) {
      return {
        status: 'good',
        title: '–•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ',
        message: '–ü—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —É—Å–ª–æ–≤–∏–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–≤—Ä–µ–º—è –∏ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–∏.',
        recommendations: [
          '–í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
          '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –∑–∞–π–º–æ–≤',
          '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤'
        ],
        color: 'yellow',
        icon: '‚ö†Ô∏è'
      };
    }
    
    if (debtBurden < 50 && incomeToPaymentRatio >= 1.5 && remainingIncome >= minLivingExpenses * 0.7) {
      return {
        status: 'moderate',
        title: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫',
        message: '–í–∞—à–∞ –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–π –∑–æ–Ω–µ. –ö—Ä–µ–¥–∏—Ç –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞.',
        recommendations: [
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –∏–ª–∏ –ø—Ä–∏–≤–ª–µ—á—å —Å–æ–∑–∞–µ–º—â–∏–∫–∞',
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞',
          '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–∏—Ç–µ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
        ],
        color: 'orange',
        icon: 'üî∂'
      };
    }
    
    return {
      status: 'high-risk',
      title: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç–∫–∞–∑–∞',
      message: '–ü—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤—ã—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –≤ –∫—Ä–µ–¥–∏—Ç–µ. –î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.',
      recommendations: [
        '–£–≤–µ–ª–∏—á—å—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞',
        '–ù–∞–π–¥–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–∞–µ–º—â–∏–∫–∞',
        '–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Ç–ª–æ–∂–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞'
      ],
      color: 'red',
      icon: '‚ùå'
    };
  };

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    amount,
    term,
    periodType,
    rate,
    errors,

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
    calculatedMonthlyPayment,
    calculatedAmount,
    calculatedTerm,
    totalInterest,
    debtBurden,
    remainingIncome,
    averageIncomeValue,

    // –ú–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    setAmount: handleAmountChange,
    setTerm: handleTermChange,
    setPeriodType,
    setRate: handleRateChange,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatNumber,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–µ–º—â–∏–∫–∞
    monthlyPayment,
    income1,
    income2,
    income3,
    averageIncome,
    setMonthlyPayment: handleMonthlyPaymentChange,
    setIncome1: handleIncome1Change,
    setIncome2: handleIncome2Change,
    setIncome3: handleIncome3Change,
    setAverageIncome: handleAverageIncomeChange,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    creditAlert,
  };
}; 