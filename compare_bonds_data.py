import json
import pandas as pd
from datetime import datetime

def load_main_data_bonds():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º –∏–∑ all_data_final.json"""
    with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    bonds_data = {}
    
    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º
    for tool in data['tools']:
        if tool.get('name') == '–û–±–ª–∏–≥–∞—Ü–∏–∏':
            for item in tool.get('items', []):
                if 'name' in item and 'items' in item:
                    bonds_data[item['name']] = item['items']
    
    return bonds_data

def load_separate_bonds_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±–ª–∏–≥–∞—Ü–∏–π"""
    bonds_files = {}
    
    try:
        with open('data/bonds_corp.json', 'r', encoding='utf-8') as f:
            bonds_files['corp'] = json.load(f)
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω bonds_corp.json")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª bonds_corp.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bonds_files['corp'] = {}
    
    try:
        with open('data/bonds_ofz.json', 'r', encoding='utf-8') as f:
            bonds_files['ofz'] = json.load(f)
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω bonds_ofz.json")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª bonds_ofz.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bonds_files['ofz'] = {}
    
    return bonds_files

def analyze_data_format(data, data_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\n=== –ê–ù–ê–õ–ò–ó –§–û–†–ú–ê–¢–ê {data_name} ===")
    
    if isinstance(data, dict):
        if len(data) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
            sample_keys = list(data.keys())[:5]
            print(f"–§–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π: {sample_keys}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π
            sample_values = [data[key] for key in sample_keys]
            print(f"–§–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π: {sample_values}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
            all_keys = sorted(data.keys())
            print(f"–ü–µ—Ä–∏–æ–¥: {all_keys[0]} - {all_keys[-1]}")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
            
        else:
            print("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
    
    elif isinstance(data, list):
        if len(data) > 0:
            print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {data[0]}")
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç: {data[-1]}")
        else:
            print("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π")
    else:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")

def convert_main_data_to_returns(main_data_items):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –º–µ—Å—è—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
    if not main_data_items or len(main_data_items) < 2:
        return {}
    
    returns = {}
    
    for i in range(1, len(main_data_items)):
        current = main_data_items[i]
        previous = main_data_items[i-1]
        
        if 'date' in current and 'value' in current and 'value' in previous:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM
            date = datetime.strptime(current['date'], '%d.%m.%Y')
            key = f"{date.year:04d}-{date.month:02d}"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            if previous['value'] != 0:
                return_value = (current['value'] - previous['value']) / previous['value']
                returns[key] = return_value
    
    return returns

def compare_bond_data(main_data, separate_data, bond_type):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É –æ–±–ª–∏–≥–∞—Ü–∏–π"""
    print(f"\n=== –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û {bond_type.upper()} ===")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    main_name_mapping = {
        'corp': '–ò–Ω–¥–µ–∫—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π',
        'ofz': '–ò–Ω–¥–µ–∫—Å –û–§–ó'
    }
    
    main_name = main_name_mapping.get(bond_type)
    main_bonds = main_data.get(main_name, [])
    separate_bonds = separate_data
    
    if not main_bonds:
        print(f"‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ {main_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ")
        return
    
    if not separate_bonds:
        print(f"‚ùå –î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –ø—É—Å—Ç—ã–µ")
        return
    
    print(f"üìä –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª ({main_name}): {len(main_bonds)} –∑–∞–ø–∏—Å–µ–π")
    print(f"üìä –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª (bonds_{bond_type}.json): {len(separate_bonds)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –º–µ—Å—è—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    main_returns = convert_main_data_to_returns(main_bonds)
    
    print(f"üìä –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å): {len(main_returns)} –∑–∞–ø–∏—Å–µ–π")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    common_periods = set(main_returns.keys()) & set(separate_bonds.keys())
    print(f"üìä –û–±—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {len(common_periods)}")
    
    if len(common_periods) > 0:
        # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        sample_periods = sorted(list(common_periods))[:10]  # –ü–µ—Ä–≤—ã–µ 10
        
        print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10 –æ–±—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:")
        print("–ü–µ—Ä–∏–æ–¥       | –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª | –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª | –†–∞–∑–Ω–∏—Ü–∞")
        print("-" * 65)
        
        total_diff = 0
        for period in sample_periods:
            val1 = main_returns[period]
            val2 = separate_bonds[period]
            diff = abs(val1 - val2)
            total_diff += diff
            
            print(f"{period}    | {val1:+.6f}     | {val2:+.6f}       | {diff:.6f}")
        
        avg_diff = total_diff / len(sample_periods)
        print(f"\n–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {avg_diff:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –æ–±—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:")
        print("–ü–µ—Ä–∏–æ–¥       | –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª | –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª | –†–∞–∑–Ω–∏—Ü–∞")
        print("-" * 65)
        
        last_periods = sorted(list(common_periods))[-5:]
        max_diff = 0
        for period in last_periods:
            val1 = main_returns[period]
            val2 = separate_bonds[period]
            diff = abs(val1 - val2)
            max_diff = max(max_diff, diff)
            
            print(f"{period}    | {val1:+.6f}     | {val2:+.6f}       | {diff:.6f}")
        
        print(f"\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö: {max_diff:.6f}")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        if avg_diff < 0.0001:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö!")
        elif avg_diff < 0.001:
            print("üü° –•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ä–∞–∑–ª–∏—á–∏—è–º–∏")
        else:
            print("üî¥ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
    print(f"\n=== –ü–û–ö–†–´–¢–ò–ï –ü–ï–†–ò–û–î–û–í ===")
    
    main_periods = set(main_returns.keys())
    separate_periods = set(separate_bonds.keys())
    
    only_in_main = main_periods - separate_periods
    only_in_separate = separate_periods - main_periods
    
    print(f"–¢–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ: {len(only_in_main)} –ø–µ—Ä–∏–æ–¥–æ–≤")
    if len(only_in_main) > 0:
        print(f"–ü—Ä–∏–º–µ—Ä—ã: {sorted(list(only_in_main))[:5]}")
    
    print(f"–¢–æ–ª—å–∫–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ: {len(only_in_separate)} –ø–µ—Ä–∏–æ–¥–æ–≤")
    if len(only_in_separate) > 0:
        print(f"–ü—Ä–∏–º–µ—Ä—ã: {sorted(list(only_in_separate))[:5]}")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    print(f"\n=== –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò ===")
    main_first = min(main_periods) if main_periods else "N/A"
    main_last = max(main_periods) if main_periods else "N/A"
    separate_first = min(separate_periods) if separate_periods else "N/A"
    separate_last = max(separate_periods) if separate_periods else "N/A"
    
    print(f"–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª:    {main_first} - {main_last}")
    print(f"–û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª:  {separate_first} - {separate_last}")

def main():
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û –û–ë–õ–ò–ì–ê–¶–ò–Ø–ú\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    main_bonds = load_main_data_bonds()
    separate_bonds = load_separate_bonds_files()
    
    print(f"\n–î–∞–Ω–Ω—ã–µ –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ:")
    for name, items in main_bonds.items():
        print(f"   ‚Ä¢ {name}: {len(items)} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\n–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:")
    for file_type, data in separate_bonds.items():
        print(f"   ‚Ä¢ bonds_{file_type}.json: {len(data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n" + "="*60)
    
    if main_bonds:
        for name, items in main_bonds.items():
            analyze_data_format(items, f"–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª - {name}")
    
    for file_type, data in separate_bonds.items():
        if data:
            analyze_data_format(data, f"bonds_{file_type}.json")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\n" + "="*60)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏
    if separate_bonds.get('corp'):
        compare_bond_data(main_bonds, separate_bonds['corp'], 'corp')
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –û–§–ó
    if separate_bonds.get('ofz'):
        compare_bond_data(main_bonds, separate_bonds['ofz'], 'ofz')

if __name__ == "__main__":
    main() 