import json
import pandas as pd
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def analyze_missing_data(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –º–∞—è 2025"""
    print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–ù–û–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–• ===\n")
    print("üìÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –¥–∞—Ç–∞: –º–∞–π 2025\n")
    
    current_date = datetime(2025, 5, 31)
    results = {}
    
    def process_items(items, path=""):
        if 'items' in items and isinstance(items['items'], list):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            dates = []
            for item in items['items']:
                if isinstance(item, dict) and 'date' in item:
                    dates.append(datetime.strptime(item['date'], '%d.%m.%Y'))
            
            if dates:
                dates.sort()
                instrument_name = f"{path} -> {items['name']}" if path else items['name']
                last_date = max(dates)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Å—è—Ü—ã
                months_missing = 0
                temp_date = last_date
                while temp_date < current_date:
                    temp_date += relativedelta(months=1)
                    months_missing += 1
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –Ω–µ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if months_missing > 0:
                    months_missing -= 1
                
                years_missing = months_missing // 12
                months_only = months_missing % 12
                
                results[instrument_name] = {
                    'last_date': last_date.strftime('%d.%m.%Y'),
                    'months_missing': months_missing,
                    'years_missing': years_missing,
                    'months_only': months_only,
                    'total_points': len(dates)
                }
                
                print(f"üìä {instrument_name}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {last_date.strftime('%d.%m.%Y')}")
                print(f"   –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(dates)}")
                
                if months_missing > 0:
                    if years_missing > 0:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {years_missing} –ª–µ—Ç {months_only} –º–µ—Å—è—Ü–µ–≤ ({months_missing} –º–µ—Å—è—Ü–µ–≤)")
                    else:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {months_missing} –º–µ—Å—è—Ü–µ–≤")
                else:
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                print()
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if 'items' in items and isinstance(items['items'], list):
            for item in items['items']:
                if isinstance(item, dict) and 'items' in item:
                    new_path = f"{path} -> {items['name']}" if path else items['name']
                    process_items(item, new_path)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    for tool in data['tools']:
        process_items(tool)
    
    return results

def analyze_inflation_data():
    """–û—Ç–¥–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏"""
    print("=== –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–û –ò–ù–§–õ–Ø–¶–ò–ò ===\n")
    
    try:
        with open('data/inflation_data.json', 'r', encoding='utf-8') as f:
            inflation_data = json.load(f)
        
        if inflation_data and len(inflation_data) > 0:
            # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"YYYY-MM": value}
            dates = []
            for date_str in inflation_data.keys():
                try:
                    # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "YYYY-MM"
                    year, month = date_str.split('-')
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    import calendar
                    last_day = calendar.monthrange(int(year), int(month))[1]
                    date_obj = datetime(int(year), int(month), last_day)
                    dates.append(date_obj)
                except:
                    continue
            
            if dates:
                dates.sort()
                last_date = max(dates)
                current_date = datetime(2025, 5, 31)
                
                months_missing = 0
                temp_date = last_date
                while temp_date < current_date:
                    temp_date += relativedelta(months=1)
                    months_missing += 1
                
                if months_missing > 0:
                    months_missing -= 1
                
                years_missing = months_missing // 12
                months_only = months_missing % 12
                
                print(f"üìä –ò–Ω—Ñ–ª—è—Ü–∏—è")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {last_date.strftime('%d.%m.%Y')}")
                print(f"   –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(dates)}")
                
                if months_missing > 0:
                    if years_missing > 0:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {years_missing} –ª–µ—Ç {months_only} –º–µ—Å—è—Ü–µ–≤ ({months_missing} –º–µ—Å—è—Ü–µ–≤)")
                    else:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {months_missing} –º–µ—Å—è—Ü–µ–≤")
                else:
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                print()
                
                return {
                    'last_date': last_date.strftime('%d.%m.%Y'),
                    'months_missing': months_missing,
                    'years_missing': years_missing,
                    'months_only': months_only,
                    'total_points': len(dates)
                }
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª inflation_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {e}")
    
    return None

def main():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–ù–û–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–• –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(data['tools'])}\n")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    missing_analysis = analyze_missing_data(data)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–ª—è—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    inflation_analysis = analyze_inflation_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º
    print("=== –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –ù–ï–î–û–°–¢–ê–Æ–©–ò–ú –î–ê–ù–ù–´–ú ===\n")
    
    all_missing = {}
    all_missing.update(missing_analysis)
    if inflation_analysis:
        all_missing['–ò–Ω—Ñ–ª—è—Ü–∏—è'] = inflation_analysis
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Å—è—Ü–µ–≤
    sorted_missing = sorted(all_missing.items(), key=lambda x: x[1]['months_missing'])
    
    print("| üè¶ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç | üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ | ‚ùå –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –º–µ—Å—è—Ü–µ–≤ | üìà –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ |")
    print("|---------------|---------------------|---------------------|-----------------|")
    
    for name, info in sorted_missing:
        status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ" if info['months_missing'] == 0 else f"‚ùå {info['months_missing']} –º–µ—Å."
        clean_name = name.replace(" -> ", " ")
        print(f"| **{clean_name}** | {info['last_date']} | {status} | {info['total_points']} |")
    
    print("\n=== –°–¢–ê–¢–£–° –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–ò ===")
    
    fully_updated = [name for name, info in all_missing.items() if info['months_missing'] == 0]
    partially_updated = [name for name, info in all_missing.items() if 0 < info['months_missing'] < 5]
    needs_update = [name for name, info in all_missing.items() if info['months_missing'] >= 5]
    
    if fully_updated:
        print(f"\n‚úÖ –ê–ö–¢–£–ê–õ–¨–ù–´–ï ({len(fully_updated)}):")
        for name in fully_updated:
            print(f"   ‚Ä¢ {name}")
    
    if partially_updated:
        print(f"\nüî∂ –ß–ê–°–¢–ò–ß–ù–û –£–°–¢–ê–†–ï–õ–ò ({len(partially_updated)}):")
        for name in partially_updated:
            months = all_missing[name]['months_missing']
            print(f"   ‚Ä¢ {name}: {months} –º–µ—Å—è—Ü–µ–≤")
    
    if needs_update:
        print(f"\nüö® –¢–†–ï–ë–£–Æ–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ({len(needs_update)}):")
        for name in needs_update:
            months = all_missing[name]['months_missing']
            print(f"   ‚Ä¢ {name}: {months} –º–µ—Å—è—Ü–µ–≤")

if __name__ == "__main__":
    main() 