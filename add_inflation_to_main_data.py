import json
import calendar
from datetime import datetime

def load_inflation_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏"""
    with open('data/inflation_data.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_main_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö"""
    with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def convert_inflation_to_main_format(inflation_data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–ª—è—Ü–∏–∏...")
    
    result = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º
    sorted_periods = sorted(inflation_data.keys())
    
    for period in sorted_periods:
        year, month = period.split('-')
        year, month = int(year), int(month)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        last_day = calendar.monthrange(year, month)[1]
        date_str = f"{last_day:02d}.{month:02d}.{year}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        result.append({
            "date": date_str,
            "value": inflation_data[period]
        })
    
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")
    print(f"   –ü–µ—Ä–∏–æ–¥: {result[0]['date']} - {result[-1]['date']}")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {result[0]['value']:.6f} - {result[-1]['value']:.6f}")
    
    return result

def add_inflation_to_main_data(main_data, inflation_items):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–ª—è—Ü–∏—é –≤ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª"""
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ñ–ª—è—Ü–∏—è
    inflation_exists = False
    for tool in main_data['tools']:
        if tool.get('name') == '–ò–Ω—Ñ–ª—è—Ü–∏—è' or tool.get('code') == 'inflation':
            print("‚ö†Ô∏è  –ò–Ω—Ñ–ª—è—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ, –∑–∞–º–µ–Ω—è–µ–º...")
            tool['items'] = inflation_items
            inflation_exists = True
            break
    
    if not inflation_exists:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏
        inflation_tool = {
            "name": "–ò–Ω—Ñ–ª—è—Ü–∏—è",
            "code": "inflation",
            "sort": 100,  # –°—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ
            "items": inflation_items
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        main_data['tools'].insert(0, inflation_tool)
        print("‚úÖ –ò–Ω—Ñ–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    else:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    return True

def backup_files():
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
        with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
            main_data = f.read()
        
        with open('data/all_data_final_with_inflation_backup.json', 'w', encoding='utf-8') as f:
            f.write(main_data)
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: data/all_data_final_with_inflation_backup.json")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def analyze_final_result(main_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –ò–¢–û–ì–û–í–û–ì–û –§–ê–ô–õ–ê:")
    
    print(f"   –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(main_data['tools'])}")
    
    current_date = datetime(2025, 5, 31)
    
    for tool in main_data['tools']:
        name = tool.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        items = tool.get('items', [])
        
        if items and isinstance(items, list) and len(items) > 0:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
            last_item = items[-1]
            if 'date' in last_item:
                last_date = datetime.strptime(last_item['date'], '%d.%m.%Y')
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ
                if last_date >= current_date:
                    status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ"
                else:
                    months_behind = (current_date.year - last_date.year) * 12 + (current_date.month - last_date.month)
                    status = f"‚ùå –û—Ç—Å—Ç–∞–µ—Ç –Ω–∞ {months_behind} –º–µ—Å."
                
                print(f"   ‚Ä¢ {name}: {len(items)} –∑–∞–ø–∏—Å–µ–π, –¥–æ {last_date.strftime('%d.%m.%Y')} - {status}")
            else:
                print(f"   ‚Ä¢ {name}: {len(items)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"   ‚Ä¢ {name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

def main():
    print("üöÄ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ù–§–õ–Ø–¶–ò–ò –í –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if not backup_files():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é.")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        inflation_data = load_inflation_data()
        main_data = load_main_data()
        
        print(f"   inflation_data.json: {len(inflation_data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   all_data_final.json: {len(main_data['tools'])} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏
        print("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞...")
        inflation_items = convert_inflation_to_main_format(inflation_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–ª—è—Ü–∏—é –≤ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
        print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        if add_inflation_to_main_data(main_data, inflation_items):
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            with open('data/all_data_final.json', 'w', encoding='utf-8') as f:
                json.dump(main_data, f, ensure_ascii=False, indent=2)
            
            print("‚úÖ –§–∞–π–ª all_data_final.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            analyze_final_result(main_data)
            
            print("\nüéâ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:")
            print("   üìÅ data/all_data_final.json - —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ")
            print("   üìÅ data/inflation_data.json - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é")
            
    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        print("üí° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: data/all_data_final_with_inflation_backup.json")

if __name__ == "__main__":
    main() 