import json
import os
from datetime import datetime, timedelta

def analyze_data_completeness():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ –ò –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–ò –í–°–ï–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
    print("\nüìä –ê–ù–ê–õ–ò–ó –ì–õ–ê–í–ù–û–ì–û –§–ê–ô–õ–ê (all_data_final.json):")
    with open('data/all_data_final.json', 'r', encoding='utf-8') as f:
        main_data = json.load(f)
    
    main_analysis = {}
    
    for tool in main_data['tools']:
        tool_name = tool['name']
        
        if tool_name == '–û–±–ª–∏–≥–∞—Ü–∏–∏':
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –æ–±–ª–∏–≥–∞—Ü–∏–π
            for item in tool['items']:
                item_name = f"{tool_name} -> {item['name']}"
                items_data = item['items']
                
                if items_data:
                    first_date = items_data[0]['date']
                    last_date = items_data[-1]['date']
                    count = len(items_data)
                    
                    main_analysis[item_name] = {
                        'count': count,
                        'first_date': first_date,
                        'last_date': last_date,
                        'data_type': 'index'
                    }
        else:
            # –û–±—ã—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            items_data = tool.get('items', [])
            
            if items_data and isinstance(items_data[0], dict) and 'date' in items_data[0]:
                first_date = items_data[0]['date']
                last_date = items_data[-1]['date']
                count = len(items_data)
                
                main_analysis[tool_name] = {
                    'count': count,
                    'first_date': first_date,
                    'last_date': last_date,
                    'data_type': 'monthly_data'
                }
    
    # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    for name, data in main_analysis.items():
        print(f"  üìà {name}:")
        print(f"    –ó–∞–ø–∏—Å–µ–π: {data['count']}")
        print(f"    –ü–µ—Ä–∏–æ–¥: {data['first_date']} ‚Üí {data['last_date']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –û–¢–î–ï–õ–¨–ù–´–• –§–ê–ô–õ–û–í:")
    
    separate_files = [
        'bonds_ofz.json',
        'bonds_corp.json', 
        'stocks_moex.json',
        'inflation_data.json',
        'deposits.json'
    ]
    
    separate_analysis = {}
    
    for filename in separate_files:
        filepath = f'data/{filename}'
        if os.path.exists(filepath):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                if isinstance(data, dict):
                    # –§–æ—Ä–º–∞—Ç {–ø–µ—Ä–∏–æ–¥: –∑–Ω–∞—á–µ–Ω–∏–µ}
                    periods = sorted(data.keys())
                    if periods:
                        first_period = periods[0] 
                        last_period = periods[-1]
                        count = len(periods)
                        
                        separate_analysis[filename] = {
                            'count': count,
                            'first_period': first_period,
                            'last_period': last_period,
                            'data_type': 'monthly_returns'
                        }
                elif isinstance(data, list):
                    # –§–æ—Ä–º–∞—Ç [{"date": "...", "value": ...}]
                    if data and 'date' in data[0]:
                        first_date = data[0]['date']
                        last_date = data[-1]['date']
                        count = len(data)
                        
                        separate_analysis[filename] = {
                            'count': count,
                            'first_date': first_date,
                            'last_date': last_date,
                            'data_type': 'date_value'
                        }
                        
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filename}: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for filename, data in separate_analysis.items():
        print(f"  üìÅ {filename}:")
        print(f"    –ó–∞–ø–∏—Å–µ–π: {data['count']}")
        if 'first_period' in data:
            print(f"    –ü–µ—Ä–∏–æ–¥: {data['first_period']} ‚Üí {data['last_period']}")
        else:
            print(f"    –ü–µ—Ä–∏–æ–¥: {data['first_date']} ‚Üí {data['last_date']}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–ò –î–û –ú–ê–Ø 2025:")
    
    target_date = "2025-05"
    current_date = datetime.now()
    may_2025 = datetime(2025, 5, 31)
    
    print(f"  üéØ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: –º–∞–π 2025")
    print(f"  üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%Y-%m-%d')}")
    print(f"  ‚è∞ –î–æ –º–∞—è 2025: {(may_2025 - current_date).days} –¥–Ω–µ–π")
    
    gaps_found = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
    print(f"\n  üìä –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª:")
    for name, data in main_analysis.items():
        last_date = data['last_date']
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É DD.MM.YYYY –≤ YYYY-MM –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            day, month, year = last_date.split('.')
            last_period = f"{year}-{month.zfill(2)}"
            
            if last_period < target_date:
                gap = f"–¥–æ {target_date}"
                print(f"    ‚ùå {name}: {last_period} (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å {gap})")
                gaps_found.append(name)
            else:
                print(f"    ‚úÖ {name}: {last_period} (–∞–∫—Ç—É–∞–ª—å–Ω–æ)")
        except:
            print(f"    ‚ö†Ô∏è {name}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É {last_date}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"\n  üìÅ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for filename, data in separate_analysis.items():
        if 'last_period' in data:
            last_period = data['last_period']
            if last_period < target_date:
                gap = f"–¥–æ {target_date}"
                print(f"    ‚ùå {filename}: {last_period} (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å {gap})")
                gaps_found.append(filename)
            else:
                print(f"    ‚úÖ {filename}: {last_period} (–∞–∫—Ç—É–∞–ª—å–Ω–æ)")
        else:
            # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            last_date = data['last_date']
            try:
                day, month, year = last_date.split('.')
                last_period = f"{year}-{month.zfill(2)}"
                
                if last_period < target_date:
                    gap = f"–¥–æ {target_date}"
                    print(f"    ‚ùå {filename}: {last_period} (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å {gap})")
                    gaps_found.append(filename)
                else:
                    print(f"    ‚úÖ {filename}: {last_period} (–∞–∫—Ç—É–∞–ª—å–Ω–æ)")
            except:
                print(f"    ‚ö†Ô∏è {filename}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É {last_date}")
    
    return {
        'main_analysis': main_analysis,
        'separate_analysis': separate_analysis,
        'gaps_found': gaps_found,
        'target_date': target_date
    }

def suggest_data_sources():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\n" + "="*60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–ù–û–í–õ–ï–ù–ò–Æ –î–ê–ù–ù–´–•")
    print("="*60)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    all_json_files = []
    for root, dirs, files in os.walk('data'):
        for file in files:
            if file.endswith('.json'):
                filepath = os.path.join(root, file)
                all_json_files.append(filepath)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    potential_sources = {}
    
    for filepath in all_json_files:
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            filename = os.path.basename(filepath)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if any(word in filename.lower() for word in ['backup', 'report', 'temp', 'analysis']):
                continue
            
            latest_period = None
            
            if isinstance(data, dict):
                # –§–æ—Ä–º–∞—Ç {–ø–µ—Ä–∏–æ–¥: –∑–Ω–∞—á–µ–Ω–∏–µ}
                periods = [k for k in data.keys() if k.startswith('20')]
                if periods:
                    latest_period = max(periods)
            elif isinstance(data, list) and data:
                # –§–æ—Ä–º–∞—Ç [{"date": "...", "value": ...}]
                if 'date' in data[-1]:
                    last_date = data[-1]['date']
                    try:
                        day, month, year = last_date.split('.')
                        latest_period = f"{year}-{month.zfill(2)}"
                    except:
                        pass
            elif isinstance(data, dict) and 'tools' in data:
                # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
            
            if latest_period and latest_period >= "2025-01":
                potential_sources[filename] = latest_period
                
        except Exception as e:
            continue
    
    if potential_sources:
        print(f"\n  üìÅ –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 2025 –≥–æ–¥:")
        for filename, last_period in sorted(potential_sources.items(), key=lambda x: x[1], reverse=True):
            print(f"    ‚ú® {filename}: –¥–æ {last_period}")
    else:
        print(f"\n  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 2025 –≥–æ–¥")
    
    print(f"\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
    print(f"  1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    print(f"  2Ô∏è‚É£ –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"  3Ô∏è‚É£ –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print(f"  4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    analysis = analyze_data_completeness()
    suggest_data_sources()
    
    print(f"\nüéØ –ö–†–ê–¢–ö–ò–ô –ò–¢–û–ì:")
    if analysis['gaps_found']:
        print(f"  ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {len(analysis['gaps_found'])} —Ñ–∞–π–ª–æ–≤")
        print(f"  üìù –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {', '.join(analysis['gaps_found'][:3])}...")
    else:
        print(f"  ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–æ –º–∞—è 2025!")
    
    print(f"\nüìÅ –°–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π...") 