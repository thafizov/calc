import requests
import json
from datetime import datetime, timedelta
import time

print("üìà –ü–∞—Ä—Å–µ—Ä –∏–Ω–¥–µ–∫—Å–∞ –ú–æ—Å–ë–∏—Ä–∂–∏ (IMOEX) —Å 2000 –≥–æ–¥–∞")
print("="*50)

def get_moex_data(start_date, end_date, start_row=0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ IMOEX —á–µ—Ä–µ–∑ API –ú–æ—Å–ë–∏—Ä–∂–∏
    """
    base_url = "https://iss.moex.com/iss/history/engines/stock/markets/index/securities/IMOEX.json"
    
    params = {
        'from': start_date,
        'till': end_date,
        'start': start_row,
        'limit': 100  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    }
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        'Accept': 'application/json, text/plain, */*',
    }
    
    try:
        response = requests.get(base_url, params=params, headers=headers, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            return None
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def parse_all_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å 2000 –≥–æ–¥–∞ –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
    """
    start_date = "2000-01-01"
    end_date = datetime.now().strftime("%Y-%m-%d")
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
    
    all_data = []
    start_row = 0
    page = 1
    
    while True:
        print(f"\nüìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} (–∑–∞–ø–∏—Å–∏ —Å {start_row})...")
        
        data = get_moex_data(start_date, end_date, start_row)
        
        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            break
            
        history = data.get('history', {})
        records = history.get('data', [])
        cursor = data.get('history.cursor', {}).get('data', [[0, 0, 0]])[0]
        
        if not records:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
            break
            
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
        print(f"   –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞: {records[0][2] if records else '–Ω–µ—Ç'}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {records[-1][2] if records else '–Ω–µ—Ç'}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_data.extend(records)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_records = cursor[1] if len(cursor) > 1 else 0
        current_start = cursor[0] if len(cursor) > 0 else 0
        
        print(f"   –ö—É—Ä—Å–æ—Ä: –Ω–∞—á–∞–ª–æ={current_start}, –≤—Å–µ–≥–æ={total_records}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã—Ö–æ–¥–∏–º
        if len(records) < 100 or current_start + len(records) >= total_records:
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
            break
            
        start_row += len(records)
        page += 1
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
    
    return all_data

def process_data(raw_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(raw_data)} –∑–∞–ø–∏—Å–µ–π...")
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ['BOARDID', 'SECID', 'TRADEDATE', 'SHORTNAME', 'NAME', 'CLOSE', 'OPEN', 'HIGH', 'LOW', ...]
    processed = {}
    
    for record in raw_data:
        if len(record) < 6:
            continue
            
        date_str = record[2]  # TRADEDATE
        close_price = record[5]  # CLOSE
        
        if not date_str or close_price is None:
            continue
            
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            month_key = date_obj.strftime("%Y-%m")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞)
            processed[month_key] = {
                'date': date_str,
                'close': float(close_price),
                'open': float(record[6]) if record[6] is not None else None,
                'high': float(record[7]) if record[7] is not None else None,
                'low': float(record[8]) if record[8] is not None else None,
            }
            
        except (ValueError, IndexError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {record[:3]} - {e}")
            continue
    
    return processed

def save_results(data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    """
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    sorted_data = dict(sorted(data.items()))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('moex_index_full.json', 'w', encoding='utf-8') as f:
        json.dump(sorted_data, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–æ–ª—å–∫–æ —Å —Ü–µ–Ω–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    simple_data = {month: values['close'] for month, values in sorted_data.items()}
    
    with open('moex_index_simple.json', 'w', encoding='utf-8') as f:
        json.dump(simple_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   üìÅ moex_index_full.json - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(sorted_data)} –º–µ—Å—è—Ü–µ–≤)")
    print(f"   üìÅ moex_index_simple.json - —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if sorted_data:
        years = sorted(set(month.split('-')[0] for month in sorted_data.keys()))
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç: {years[0]} - {years[-1]}")
        print(f"   –í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤: {len(sorted_data)}")
        
        # –ü–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        first_month = min(sorted_data.keys())
        last_month = max(sorted_data.keys())
        
        print(f"\nüìä –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        print(f"   {first_month}: {sorted_data[first_month]['close']:.2f}")
        
        print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        print(f"   {last_month}: {sorted_data[last_month]['close']:.2f}")
        
        # –†–æ—Å—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        first_price = sorted_data[first_month]['close']
        last_price = sorted_data[last_month]['close']
        total_growth = ((last_price / first_price) - 1) * 100
        
        print(f"\nüöÄ –û–±—â–∏–π —Ä–æ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_growth:.1f}%")

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        raw_data = parse_all_data()
        
        if not raw_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processed_data = process_data(raw_data)
        
        if not processed_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(processed_data)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 