import json
import pandas as pd
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open('data/all_data.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def create_final_clean_data(data):
    """–°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("=== –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –û–ß–ò–©–ï–ù–ù–´–• –î–ê–ù–ù–´–• ===\n")
    
    current_date = datetime(2025, 5, 31)  # –ú–∞–π 2025
    
    def clean_items(items, path=""):
        if 'items' in items and isinstance(items['items'], list):
            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            cleaned_items = []
            for item in items['items']:
                if isinstance(item, dict):
                    item_path = f"{path} -> {item.get('name', '')}" if path else item.get('name', '')
                    
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    if 'code' in item:
                        # –£–¥–∞–ª—è–µ–º –¥–æ–ª–ª–∞—Ä–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
                        if 'dollar' in item['code'].lower():
                            print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {item_path} (–∫–æ–¥: {item['code']})")
                            continue
                        
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –∑–æ–ª–æ—Ç–æ
                        if item['code'] in ['gold', 'real_estate'] or '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å' in item.get('name', '').lower() or '–∑–æ–ª–æ—Ç–æ' in item.get('name', '').lower():
                            print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {item_path} (–∫–æ–¥: {item['code']})")
                            continue
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    if any(word in item.get('name', '').lower() for word in ['–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∑–æ–ª–æ—Ç–æ', 'gold']):
                        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {item_path}")
                        continue
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    cleaned_item = clean_items(item, item_path)
                    if cleaned_item and (cleaned_item.get('items') or 'date' in str(cleaned_item)):
                        cleaned_items.append(cleaned_item)
                else:
                    cleaned_items.append(item)
            
            # –£–ø—Ä–æ—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - —É–±–∏—Ä–∞–µ–º "–†—É–±–ª–µ–≤—ã–µ"
            result = items.copy()
            
            # –ï—Å–ª–∏ —ç—Ç–æ "–†—É–±–ª–µ–≤—ã–µ" –¥–µ–ø–æ–∑–∏—Ç—ã, –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
            if items.get('name') == '–†—É–±–ª–µ–≤—ã–µ' and path and '–î–µ–ø–æ–∑–∏—Ç—ã' in path:
                print(f"üìù –£–ø—Ä–æ—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —É–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å '–†—É–±–ª–µ–≤—ã–µ'")
                return cleaned_items  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏
            
            result['items'] = cleaned_items
            return result
        else:
            return items
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cleaned_data = {'tools': []}
    for tool in data['tools']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ - —É–¥–∞–ª—è–µ–º –∑–æ–ª–æ—Ç–æ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        if tool.get('name') in ['–ó–æ–ª–æ—Ç–æ', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å']:
            print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool.get('name', '')} (–∫–æ–¥: {tool.get('code', '')})")
            continue
        
        if tool.get('code') in ['gold', 'realty']:
            print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool.get('name', '')} (–∫–æ–¥: {tool.get('code', '')})")
            continue
            
        cleaned_tool = clean_items(tool)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        if cleaned_tool.get('name') == '–î–µ–ø–æ–∑–∏—Ç—ã':
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—É–±–ª–µ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            new_items = []
            for item in cleaned_tool.get('items', []):
                if isinstance(item, list):  # –≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ "–†—É–±–ª–µ–≤—ã—Ö"
                    new_items.extend(item)
                elif item.get('name') != '–†—É–±–ª–µ–≤—ã–µ':
                    new_items.append(item)
                elif item.get('name') == '–†—É–±–ª–µ–≤—ã–µ':
                    new_items.extend(item.get('items', []))
            
            cleaned_tool['items'] = new_items
        
        if cleaned_tool and cleaned_tool.get('items'):
            cleaned_data['tools'].append(cleaned_tool)
    
    return cleaned_data

def analyze_missing_data(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –º–∞—è 2025"""
    print("=== –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –î–ê–ù–ù–´–• (–¥–æ –º–∞—è 2025) ===\n")
    
    current_date = datetime(2025, 5, 31)
    results = {}
    
    def process_items(items, path=""):
        if 'items' in items and isinstance(items['items'], list):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            dates = []
            for item in items['items']:
                if isinstance(item, dict) and 'date' in item:
                    dates.append(datetime.strptime(item['date'], '%d.%m.%Y'))
            
            if dates:
                dates.sort()
                instrument_name = f"{path} -> {items['name']}" if path else items['name']
                last_date = max(dates)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Å—è—Ü—ã
                months_missing = 0
                temp_date = last_date
                while temp_date < current_date:
                    temp_date += relativedelta(months=1)
                    months_missing += 1
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –Ω–µ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if months_missing > 0:
                    months_missing -= 1
                
                years_missing = months_missing // 12
                months_only = months_missing % 12
                
                results[instrument_name] = {
                    'last_date': last_date.strftime('%d.%m.%Y'),
                    'months_missing': months_missing,
                    'years_missing': years_missing,
                    'months_only': months_only,
                    'total_points': len(dates)
                }
                
                print(f"üìä {instrument_name}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {last_date.strftime('%d.%m.%Y')}")
                print(f"   –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(dates)}")
                
                if months_missing > 0:
                    if years_missing > 0:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {years_missing} –ª–µ—Ç {months_only} –º–µ—Å—è—Ü–µ–≤ ({months_missing} –º–µ—Å—è—Ü–µ–≤)")
                    else:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {months_missing} –º–µ—Å—è—Ü–µ–≤")
                else:
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                print()
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if 'items' in items and isinstance(items['items'], list):
            for item in items['items']:
                if isinstance(item, dict) and 'items' in item:
                    new_path = f"{path} -> {items['name']}" if path else items['name']
                    process_items(item, new_path)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    for tool in data['tools']:
        process_items(tool)
    
    return results

def analyze_inflation_data():
    """–û—Ç–¥–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏"""
    print("=== –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–û –ò–ù–§–õ–Ø–¶–ò–ò ===\n")
    
    try:
        with open('data/inflation_data.json', 'r', encoding='utf-8') as f:
            inflation_data = json.load(f)
        
        if inflation_data and len(inflation_data) > 0:
            # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"YYYY-MM": value}
            dates = []
            for date_str in inflation_data.keys():
                try:
                    # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "YYYY-MM"
                    year, month = date_str.split('-')
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    import calendar
                    last_day = calendar.monthrange(int(year), int(month))[1]
                    date_obj = datetime(int(year), int(month), last_day)
                    dates.append(date_obj)
                except:
                    continue
            
            if dates:
                dates.sort()
                last_date = max(dates)
                current_date = datetime(2025, 5, 31)
                
                months_missing = 0
                temp_date = last_date
                while temp_date < current_date:
                    temp_date += relativedelta(months=1)
                    months_missing += 1
                
                if months_missing > 0:
                    months_missing -= 1
                
                years_missing = months_missing // 12
                months_only = months_missing % 12
                
                print(f"üìä –ò–Ω—Ñ–ª—è—Ü–∏—è")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {last_date.strftime('%d.%m.%Y')}")
                print(f"   –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(dates)}")
                
                if months_missing > 0:
                    if years_missing > 0:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {years_missing} –ª–µ—Ç {months_only} –º–µ—Å—è—Ü–µ–≤ ({months_missing} –º–µ—Å—è—Ü–µ–≤)")
                    else:
                        print(f"   ‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {months_missing} –º–µ—Å—è—Ü–µ–≤")
                else:
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                print()
                
                return {
                    'last_date': last_date.strftime('%d.%m.%Y'),
                    'months_missing': months_missing,
                    'years_missing': years_missing,
                    'months_only': months_only,
                    'total_points': len(dates)
                }
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª inflation_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏: {e}")
    
    return None

def main():
    print("üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•\n")
    print("üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: –º–∞–π 2025\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(data['tools'])}\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleaned_data = create_final_clean_data(data)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    missing_analysis = analyze_missing_data(cleaned_data)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–ª—è—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    inflation_analysis = analyze_inflation_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('data/all_data_final.json', 'w', encoding='utf-8') as f:
        json.dump(cleaned_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/all_data_final.json")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º
    print("\n=== –°–í–û–î–ö–ê –ü–û –ù–ï–î–û–°–¢–ê–Æ–©–ò–ú –î–ê–ù–ù–´–ú ===\n")
    
    all_missing = {}
    all_missing.update(missing_analysis)
    if inflation_analysis:
        all_missing['–ò–Ω—Ñ–ª—è—Ü–∏—è'] = inflation_analysis
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Å—è—Ü–µ–≤
    sorted_missing = sorted(all_missing.items(), key=lambda x: x[1]['months_missing'], reverse=True)
    
    for name, info in sorted_missing:
        if info['months_missing'] > 0:
            print(f"‚ö†Ô∏è  {name}: {info['months_missing']} –º–µ—Å—è—Ü–µ–≤ (–¥–æ {info['last_date']})")
        else:
            print(f"‚úÖ {name}: –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_report = {
        'analysis_date': datetime.now().isoformat(),
        'current_reference_date': '31.05.2025',
        'missing_data_analysis': all_missing,
        'instruments_kept': list(all_missing.keys()),
        'instruments_removed': ['–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–ó–æ–ª–æ—Ç–æ', '–î–æ–ª–ª–∞—Ä–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã']
    }
    
    with open('data/final_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(final_report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data/final_analysis_report.json")

if __name__ == "__main__":
    main() 