import json
import pandas as pd
from datetime import datetime, timedelta
from collections import defaultdict

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open('data/all_data.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def analyze_data_gaps(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ê–ù–ê–õ–ò–ó –ü–†–û–ü–£–°–ö–û–í –í –î–ê–ù–ù–´–• ===\n")
    
    results = {}
    
    def process_items(items, path=""):
        if 'items' in items:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            dates = []
            for item in items['items']:
                if 'date' in item:
                    dates.append(datetime.strptime(item['date'], '%d.%m.%Y'))
            
            if dates:
                dates.sort()
                instrument_name = f"{path} -> {items['name']}"
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—Å–∫–∏
                gaps = []
                for i in range(1, len(dates)):
                    gap_days = (dates[i] - dates[i-1]).days
                    if gap_days > 32:  # –ë–æ–ª–µ–µ –º–µ—Å—è—Ü–∞
                        gaps.append({
                            'from': dates[i-1].strftime('%d.%m.%Y'),
                            'to': dates[i].strftime('%d.%m.%Y'),
                            'days': gap_days
                        })
                
                results[instrument_name] = {
                    'first_date': dates[0].strftime('%d.%m.%Y'),
                    'last_date': dates[-1].strftime('%d.%m.%Y'),
                    'total_points': len(dates),
                    'gaps': gaps
                }
                
                print(f"üìä {instrument_name}")
                print(f"   –ü–µ—Ä–∏–æ–¥: {dates[0].strftime('%d.%m.%Y')} - {dates[-1].strftime('%d.%m.%Y')}")
                print(f"   –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(dates)}")
                if gaps:
                    print(f"   ‚ùå –ü—Ä–æ–ø—É—Å–∫–∏ (> –º–µ—Å—è—Ü–∞): {len(gaps)}")
                    for gap in gaps:
                        print(f"      {gap['from']} -> {gap['to']} ({gap['days']} –¥–Ω–µ–π)")
                else:
                    print(f"   ‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç")
                print()
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if 'items' in items and isinstance(items['items'], list):
            for item in items['items']:
                if isinstance(item, dict) and 'items' in item:
                    new_path = f"{path} -> {items['name']}" if path else items['name']
                    process_items(item, new_path)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    for tool in data['tools']:
        process_items(tool)
    
    return results

def find_dollar_deposits(data):
    """–ù–∞—Ö–æ–¥–∏–º –¥–æ–ª–ª–∞—Ä–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    print("=== –î–û–õ–õ–ê–†–û–í–´–ï –î–ï–ü–û–ó–ò–¢–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø ===\n")
    
    dollar_items = []
    
    def find_dollar_items(items, path=""):
        if 'code' in items and 'dollar' in items['code'].lower():
            full_path = f"{path} -> {items['name']}" if path else items['name']
            dollar_items.append({
                'path': full_path,
                'code': items['code'],
                'name': items['name']
            })
            print(f"üíµ {full_path}")
            print(f"   –ö–æ–¥: {items['code']}")
            if 'items' in items and isinstance(items['items'], list) and len(items['items']) > 0:
                if 'date' in items['items'][0]:
                    print(f"   –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(items['items'])}")
            print()
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        if 'items' in items and isinstance(items['items'], list):
            for item in items['items']:
                if isinstance(item, dict):
                    new_path = f"{path} -> {items['name']}" if path else items['name']
                    find_dollar_items(item, new_path)
    
    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    for tool in data['tools']:
        find_dollar_items(tool)
    
    return dollar_items

def analyze_time_coverage(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º"""
    print("=== –û–ë–©–ï–ï –í–†–ï–ú–ï–ù–ù–û–ï –ü–û–ö–†–´–¢–ò–ï ===\n")
    
    all_dates = set()
    instruments = {}
    
    def collect_dates(items, path=""):
        if 'items' in items and isinstance(items['items'], list):
            dates = []
            for item in items['items']:
                if 'date' in item:
                    date_obj = datetime.strptime(item['date'], '%d.%m.%Y')
                    dates.append(date_obj)
                    all_dates.add(date_obj)
            
            if dates:
                instrument_name = f"{path} -> {items['name']}" if path else items['name']
                instruments[instrument_name] = {
                    'dates': set(dates),
                    'first': min(dates),
                    'last': max(dates)
                }
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if 'items' in items and isinstance(items['items'], list):
            for item in items['items']:
                if isinstance(item, dict) and ('items' in item or 'date' in item):
                    new_path = f"{path} -> {items['name']}" if path else items['name']
                    collect_dates(item, new_path)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã
    for tool in data['tools']:
        collect_dates(tool)
    
    if all_dates:
        min_date = min(all_dates)
        max_date = max(all_dates)
        print(f"üìÖ –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {min_date.strftime('%d.%m.%Y')} - {max_date.strftime('%d.%m.%Y')}")
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {len(all_dates)}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        print("üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:")
        for name, info in instruments.items():
            coverage = len(info['dates']) / len(all_dates) * 100
            print(f"   {name}: {coverage:.1f}% ({len(info['dates'])} –∏–∑ {len(all_dates)} –¥–∞—Ç)")
        print()
    
    return instruments

def create_clean_data(data):
    """–°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥–æ–ª–ª–∞—Ä–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    print("=== –°–û–ó–î–ê–ù–ò–ï –û–ß–ò–©–ï–ù–ù–´–• –î–ê–ù–ù–´–• ===\n")
    
    def clean_items(items):
        if 'items' in items and isinstance(items['items'], list):
            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã - —É–±–∏—Ä–∞–µ–º –¥–æ–ª–ª–∞—Ä–æ–≤—ã–µ
            cleaned_items = []
            for item in items['items']:
                if isinstance(item, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ dollar
                    if 'code' in item and 'dollar' in item['code'].lower():
                        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {item['name']} (–∫–æ–¥: {item['code']})")
                        continue
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    cleaned_item = clean_items(item)
                    if cleaned_item:
                        cleaned_items.append(cleaned_item)
                else:
                    cleaned_items.append(item)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            result = items.copy()
            result['items'] = cleaned_items
            return result
        else:
            return items
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cleaned_data = {'tools': []}
    for tool in data['tools']:
        cleaned_tool = clean_items(tool)
        if cleaned_tool and cleaned_tool.get('items'):  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã
            cleaned_data['tools'].append(cleaned_tool)
    
    return cleaned_data

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• all_data.json\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(data['tools'])}\n")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
    gaps_analysis = analyze_data_gaps(data)
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ–ª–ª–∞—Ä–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    dollar_items = find_dollar_deposits(data)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    coverage_analysis = analyze_time_coverage(data)
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleaned_data = create_clean_data(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('data/all_data_cleaned.json', 'w', encoding='utf-8') as f:
        json.dump(cleaned_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/all_data_cleaned.json")
    print(f"üìä –£–¥–∞–ª–µ–Ω–æ {len(dollar_items)} –¥–æ–ª–ª–∞—Ä–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ
    report = {
        'analysis_date': datetime.now().isoformat(),
        'gaps_analysis': gaps_analysis,
        'dollar_items_removed': dollar_items,
        'coverage_analysis': {name: {
            'first_date': info['first'].strftime('%d.%m.%Y'),
            'last_date': info['last'].strftime('%d.%m.%Y'),
            'total_dates': len(info['dates'])
        } for name, info in coverage_analysis.items()}
    }
    
    with open('data/data_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"üìã –û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data/data_analysis_report.json")

if __name__ == "__main__":
    main() 